let Declaration=require("../declaration"),Processor=require("../processor"),{autoplaceGridItems:autoplaceGridItems,getGridGap:getGridGap,inheritGridGap:inheritGridGap,prefixTrackProp:prefixTrackProp,prefixTrackValue:prefixTrackValue}=require("./grid-utils");class GridRowsColumns extends Declaration{insert(r,e,o,t){if("-ms-"!==e)return super.insert(r,e,o);let{parent:i,prop:p,value:a}=r,l=p.includes("rows"),s=p.includes("columns"),n=i.some(r=>"grid-template"===r.prop||"grid-template-areas"===r.prop);if(n&&l)return!1;let d=new Processor({options:{}}),u=d.gridStatus(i,t),c=getGridGap(r);c=inheritGridGap(r,c)||c;let m=l?c.row:c.column;"no-autoplace"!==u&&!0!==u||n||(m=null);let f=prefixTrackValue({gap:m,value:a});r.cloneBefore({prop:prefixTrackProp({prefix:e,prop:p}),value:f});let g=i.nodes.find(r=>"grid-auto-flow"===r.prop),w="row";if(g&&!d.disabled(g,t)&&(w=g.value.trim()),"autoplace"===u){let e=i.nodes.find(r=>"grid-template-rows"===r.prop);if(!e&&n)return;if(!e&&!n)return void r.warn(t,"Autoplacement does not work without grid-template-rows property");i.nodes.find(r=>"grid-template-columns"===r.prop)||n||r.warn(t,"Autoplacement does not work without grid-template-columns property"),s&&!n&&autoplaceGridItems(r,t,c,w)}}normalize(r){return r.replace(/^grid-(rows|columns)/,"grid-template-$1")}prefixed(r,e){return"-ms-"===e?prefixTrackProp({prefix:e,prop:r}):super.prefixed(r,e)}}GridRowsColumns.names=["grid-template-rows","grid-template-columns","grid-rows","grid-columns"],module.exports=GridRowsColumns;