let{list:list}=require("postcss"),Browsers=require("./browsers"),OldSelector=require("./old-selector"),Prefixer=require("./prefixer"),utils=require("./utils");class Selector extends Prefixer{constructor(e,r,t){super(e,r,t),this.regexpCache=new Map}add(e,r){let t=this.prefixeds(e);if(this.already(e,t,r))return;let s=this.clone(e,{selector:t[this.name][r]});e.parent.insertBefore(e,s)}already(e,r,t){let s=e.parent.index(e)-1;for(;s>=0;){let i=e.parent.nodes[s];if("rule"!==i.type)return!1;let l=!1;for(let e in r[this.name]){let s=r[this.name][e];if(i.selector===s){if(t===e)return!0;l=!0;break}}if(!l)return!1;s-=1}return!1}check(e){return!!e.selector.includes(this.name)&&!!e.selector.match(this.regexp())}old(e){return new OldSelector(this,e)}possible(){return Browsers.prefixes()}prefixed(e){return this.name.replace(/^(\W*)/,`$1${e}`)}prefixeds(e){if(e._autoprefixerPrefixeds){if(e._autoprefixerPrefixeds[this.name])return e._autoprefixerPrefixeds}else e._autoprefixerPrefixeds={};let r={};if(e.selector.includes(",")){let t=list.comma(e.selector).filter(e=>e.includes(this.name));for(let e of this.possible())r[e]=t.map(r=>this.replace(r,e)).join(", ")}else for(let t of this.possible())r[t]=this.replace(e.selector,t);return e._autoprefixerPrefixeds[this.name]=r,e._autoprefixerPrefixeds}regexp(e){if(!this.regexpCache.has(e)){let r=e?this.prefixed(e):this.name;this.regexpCache.set(e,new RegExp(`(^|[^:"'=])${utils.escapeRegexp(r)}`,"gi"))}return this.regexpCache.get(e)}replace(e,r){return e.replace(this.regexp(),`$1${this.prefixed(r)}`)}}module.exports=Selector;