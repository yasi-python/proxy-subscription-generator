let OldValue=require("./old-value"),Prefixer=require("./prefixer"),utils=require("./utils"),vendor=require("./vendor");class Value extends Prefixer{static save(e,r){let u=r.prop,a=[];for(let l in r._autoprefixerValues){let t,i=r._autoprefixerValues[l];if(i===r.value)continue;let s=vendor.prefix(u);if("-pie-"===s)continue;if(s===l){t=r.value=i,a.push(t);continue}let p=e.prefixed(u,l),n=r.parent;if(!n.every(e=>e.prop!==p)){a.push(t);continue}let o=i.replace(/\s+/," ");if(n.some(e=>e.prop===r.prop&&e.value.replace(/\s+/," ")===o)){a.push(t);continue}let h=this.clone(r,{value:i});t=r.parent.insertBefore(r,h),a.push(t)}return a}add(e,r){e._autoprefixerValues||(e._autoprefixerValues={});let u,a=e._autoprefixerValues[r]||this.value(e);do{if(u=a,a=this.replace(a,r),!1===a)return}while(a!==u);e._autoprefixerValues[r]=a}check(e){let r=e.value;return!!r.includes(this.name)&&!!r.match(this.regexp())}old(e){return new OldValue(this.name,e+this.name)}regexp(){return this.regexpCache||(this.regexpCache=utils.regexp(this.name))}replace(e,r){return e.replace(this.regexp(),`$1${r}$2`)}value(e){return e.raws.value&&e.raws.value.value===e.value?e.raws.value.raw:e.value}}module.exports=Value;