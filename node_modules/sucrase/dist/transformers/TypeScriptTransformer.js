"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var _types=require("../parser/tokenizer/types"),_isIdentifier=require("../util/isIdentifier"),_isIdentifier2=_interopRequireDefault(_isIdentifier),_Transformer=require("./Transformer"),_Transformer2=_interopRequireDefault(_Transformer);class TypeScriptTransformer extends _Transformer2.default{constructor(e,t,s){super(),this.rootTransformer=e,this.tokens=t,this.isImportsTransformEnabled=s}process(){return!(!(this.rootTransformer.processPossibleArrowParamEnd()||this.rootTransformer.processPossibleAsyncArrowWithTypeParams()||this.rootTransformer.processPossibleTypeRange())&&(this.tokens.matches1(_types.TokenType._public)||this.tokens.matches1(_types.TokenType._protected)||this.tokens.matches1(_types.TokenType._private)||this.tokens.matches1(_types.TokenType._abstract)||this.tokens.matches1(_types.TokenType._readonly)||this.tokens.matches1(_types.TokenType._override)||this.tokens.matches1(_types.TokenType.nonNullAssertion)?(this.tokens.removeInitialToken(),0):this.tokens.matches1(_types.TokenType._enum)||this.tokens.matches2(_types.TokenType._const,_types.TokenType._enum)?(this.processEnum(),0):!this.tokens.matches2(_types.TokenType._export,_types.TokenType._enum)&&!this.tokens.matches3(_types.TokenType._export,_types.TokenType._const,_types.TokenType._enum)||(this.processEnum(!0),0)))}processEnum(e=!1){for(this.tokens.removeInitialToken();this.tokens.matches1(_types.TokenType._const)||this.tokens.matches1(_types.TokenType._enum);)this.tokens.removeToken();const t=this.tokens.identifierName();this.tokens.removeToken(),e&&!this.isImportsTransformEnabled&&this.tokens.appendCode("export "),this.tokens.appendCode(`var ${t}; (function (${t})`),this.tokens.copyExpectedToken(_types.TokenType.braceL),this.processEnumBody(t),this.tokens.copyExpectedToken(_types.TokenType.braceR),e&&this.isImportsTransformEnabled?this.tokens.appendCode(`)(${t} || (exports.${t} = ${t} = {}));`):this.tokens.appendCode(`)(${t} || (${t} = {}));`)}processEnumBody(e){let t=null;for(;!this.tokens.matches1(_types.TokenType.braceR);){const{nameStringCode:s,variableName:n}=this.extractEnumKeyInfo(this.tokens.currentToken());this.tokens.removeInitialToken(),this.tokens.matches3(_types.TokenType.eq,_types.TokenType.string,_types.TokenType.comma)||this.tokens.matches3(_types.TokenType.eq,_types.TokenType.string,_types.TokenType.braceR)?this.processStringLiteralEnumMember(e,s,n):this.tokens.matches1(_types.TokenType.eq)?this.processExplicitValueEnumMember(e,s,n):this.processImplicitValueEnumMember(e,s,n,t),this.tokens.matches1(_types.TokenType.comma)&&this.tokens.removeToken(),t=null!=n?n:`${e}[${s}]`}}extractEnumKeyInfo(e){if(e.type===_types.TokenType.name){const t=this.tokens.identifierNameForToken(e);return{nameStringCode:`"${t}"`,variableName:_isIdentifier2.default.call(void 0,t)?t:null}}if(e.type===_types.TokenType.string){const t=this.tokens.stringValueForToken(e);return{nameStringCode:this.tokens.code.slice(e.start,e.end),variableName:_isIdentifier2.default.call(void 0,t)?t:null}}throw new Error("Expected name or string at beginning of enum element.")}processStringLiteralEnumMember(e,t,s){null!=s?(this.tokens.appendCode(`const ${s}`),this.tokens.copyToken(),this.tokens.copyToken(),this.tokens.appendCode(`; ${e}[${t}] = ${s};`)):(this.tokens.appendCode(`${e}[${t}]`),this.tokens.copyToken(),this.tokens.copyToken(),this.tokens.appendCode(";"))}processExplicitValueEnumMember(e,t,s){const n=this.tokens.currentToken().rhsEndIndex;if(null==n)throw new Error("Expected rhsEndIndex on enum assign.");if(null!=s){for(this.tokens.appendCode(`const ${s}`),this.tokens.copyToken();this.tokens.currentIndex()<n;)this.rootTransformer.processToken();this.tokens.appendCode(`; ${e}[${e}[${t}] = ${s}] = ${t};`)}else{for(this.tokens.appendCode(`${e}[${e}[${t}]`),this.tokens.copyToken();this.tokens.currentIndex()<n;)this.rootTransformer.processToken();this.tokens.appendCode(`] = ${t};`)}}processImplicitValueEnumMember(e,t,s,n){let o=null!=n?`${n} + 1`:"0";null!=s&&(this.tokens.appendCode(`const ${s} = ${o}; `),o=s),this.tokens.appendCode(`${e}[${e}[${t}] = ${o}] = ${t};`)}}exports.default=TypeScriptTransformer;