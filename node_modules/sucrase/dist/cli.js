"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var _commander=require("commander"),_commander2=_interopRequireDefault(_commander),_glob=require("glob"),_fs=require("mz/fs"),_path=require("path"),_index=require("./index");function run(){_commander2.default.description("Sucrase: super-fast Babel alternative.").usage("[options] <srcDir>").option("-d, --out-dir <out>","Compile an input directory of modules into an output directory.").option("-p, --project <dir>","Compile a TypeScript project, will read from tsconfig.json in <dir>").option("--out-extension <extension>","File extension to use for all output files.","js").option("--exclude-dirs <paths>","Names of directories that should not be traversed.").option("-q, --quiet","Don't print the names of converted files.").option("-t, --transforms <transforms>","Comma-separated list of transforms to run.").option("--disable-es-transforms","Opt out of all ES syntax transforms.").option("--jsx-runtime <string>","Transformation mode for the JSX transform.").option("--production","Disable debugging information from JSX in output.").option("--jsx-import-source <string>","Automatic JSX transform import path prefix, defaults to `React.Fragment`.").option("--jsx-pragma <string>","Classic JSX transform element creation function, defaults to `React.createElement`.").option("--jsx-fragment-pragma <string>","Classic JSX transform fragment component, defaults to `React.Fragment`.").option("--keep-unused-imports","Disable automatic removal of type-only imports/exports.").option("--preserve-dynamic-import","Don't transpile dynamic import() to require.").option("--inject-create-require-for-import-require","Use `createRequire` when transpiling TS `import = require` to ESM.").option("--enable-legacy-typescript-module-interop","Use default TypeScript ESM/CJS interop strategy.").option("--enable-legacy-babel5-module-interop","Use Babel 5 ESM/CJS interop strategy.").parse(process.argv),_commander2.default.project?(_commander2.default.outDir||_commander2.default.transforms||_commander2.default.args[0]||_commander2.default.enableLegacyTypescriptModuleInterop)&&(console.error("If TypeScript project is specified, out directory, transforms, source directory, and --enable-legacy-typescript-module-interop may not be specified."),process.exit(1)):(_commander2.default.outDir||(console.error("Out directory is required"),process.exit(1)),_commander2.default.transforms||(console.error("Transforms option is required."),process.exit(1)),_commander2.default.args[0]||(console.error("Source directory is required."),process.exit(1)));buildDirectory({outDirPath:_commander2.default.outDir,srcDirPath:_commander2.default.args[0],project:_commander2.default.project,outExtension:_commander2.default.outExtension,excludeDirs:_commander2.default.excludeDirs?_commander2.default.excludeDirs.split(","):[],quiet:_commander2.default.quiet,sucraseOptions:{transforms:_commander2.default.transforms?_commander2.default.transforms.split(","):[],disableESTransforms:_commander2.default.disableEsTransforms,jsxRuntime:_commander2.default.jsxRuntime,production:_commander2.default.production,jsxImportSource:_commander2.default.jsxImportSource,jsxPragma:_commander2.default.jsxPragma||"React.createElement",jsxFragmentPragma:_commander2.default.jsxFragmentPragma||"React.Fragment",keepUnusedImports:_commander2.default.keepUnusedImports,preserveDynamicImport:_commander2.default.preserveDynamicImport,injectCreateRequireForImportRequire:_commander2.default.injectCreateRequireForImportRequire,enableLegacyTypeScriptModuleInterop:_commander2.default.enableLegacyTypescriptModuleInterop,enableLegacyBabel5ModuleInterop:_commander2.default.enableLegacyBabel5ModuleInterop}}).catch(e=>{process.exitCode=1,console.error(e)})}async function findFiles(e){const o=e.outDirPath,t=e.srcDirPath,r=e.sucraseOptions.transforms.includes("typescript")?[".ts",".tsx"]:[".js",".jsx"];await _fs.exists.call(void 0,o)||await _fs.mkdir.call(void 0,o);const i=[];for(const a of await _fs.readdir.call(void 0,t)){if(["node_modules",".git"].includes(a)||e.excludeDirs.includes(a))continue;const s=_path.join.call(void 0,t,a),n=_path.join.call(void 0,o,a);if((await _fs.stat.call(void 0,s)).isDirectory()){const o={...e};o.srcDirPath=s,o.outDirPath=n;const t=await findFiles(o);i.push(...t)}else if(r.some(e=>s.endsWith(e))){const o=n.replace(/\.\w+$/,`.${e.outExtension}`);i.push({srcPath:s,outPath:o})}}return i}async function runGlob(e){const o=_path.join.call(void 0,e.project,"tsconfig.json");let t;try{t=await _fs.readFile.call(void 0,o,"utf8")}catch(o){console.error("Could not find project tsconfig.json"),console.error(`  --project=${e.project}`),console.error(o),process.exit(1)}const r=JSON.parse(t),i=[],a=r.files,s=r.include,n=_path.join.call(void 0,process.cwd(),e.project),c=[];if(await _fs.exists.call(void 0,e.outDirPath)||await _fs.mkdir.call(void 0,e.outDirPath),a)for(const o of a){if(o.endsWith(".d.ts"))continue;if(!o.endsWith(".ts")&&!o.endsWith(".js"))continue;const t=_path.join.call(void 0,n,o),r=_path.join.call(void 0,e.outDirPath,o).replace(/\.\w+$/,`.${e.outExtension}`),a=_path.dirname.call(void 0,r);c.includes(a)||c.push(a),i.push({srcPath:t,outPath:r})}if(s)for(const o of s){const t=await _glob.glob.call(void 0,_path.join.call(void 0,n,o));for(const o of t){if(!o.endsWith(".ts")&&!o.endsWith(".js"))continue;if(o.endsWith(".d.ts"))continue;const t=_path.relative.call(void 0,n,o),r=_path.join.call(void 0,e.outDirPath,t).replace(/\.\w+$/,`.${e.outExtension}`),a=_path.dirname.call(void 0,r);c.includes(a)||c.push(a),i.push({srcPath:o,outPath:r})}}for(const e of c)await _fs.exists.call(void 0,e)||await _fs.mkdir.call(void 0,e);return i}async function updateOptionsFromProject(e){const o=_path.join.call(void 0,e.project,"tsconfig.json");let t;try{t=await _fs.readFile.call(void 0,o,"utf8")}catch(o){console.error("Could not find project tsconfig.json"),console.error(`  --project=${e.project}`),console.error(o),process.exit(1)}const r=JSON.parse(t),i=e.sucraseOptions;i.transforms.includes("typescript")||i.transforms.push("typescript");const a=r.compilerOptions;a.outDir&&(e.outDirPath=_path.join.call(void 0,process.cwd(),e.project,a.outDir)),!0!==a.esModuleInterop&&(i.enableLegacyTypeScriptModuleInterop=!0),"commonjs"===a.module&&(i.transforms.includes("imports")||i.transforms.push("imports"))}async function buildDirectory(e){let o;e.outDirPath&&e.srcDirPath?o=await findFiles(e):e.project?(await updateOptionsFromProject(e),o=await runGlob(e)):(console.error("Project or Source directory required."),process.exit(1));for(const t of o)await buildFile(t.srcPath,t.outPath,e)}async function buildFile(e,o,t){t.quiet||console.log(`${e} -> ${o}`);const r=(await _fs.readFile.call(void 0,e)).toString(),i=_index.transform.call(void 0,r,{...t.sucraseOptions,filePath:e}).code;await _fs.writeFile.call(void 0,o,i)}exports.default=run;