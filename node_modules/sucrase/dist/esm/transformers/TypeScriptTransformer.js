import{TokenType as tt}from"../parser/tokenizer/types";import isIdentifier from"../util/isIdentifier";import Transformer from"./Transformer";export default class TypeScriptTransformer extends Transformer{constructor(t,e,s){super(),this.rootTransformer=t,this.tokens=e,this.isImportsTransformEnabled=s}process(){return!(!(this.rootTransformer.processPossibleArrowParamEnd()||this.rootTransformer.processPossibleAsyncArrowWithTypeParams()||this.rootTransformer.processPossibleTypeRange())&&(this.tokens.matches1(tt._public)||this.tokens.matches1(tt._protected)||this.tokens.matches1(tt._private)||this.tokens.matches1(tt._abstract)||this.tokens.matches1(tt._readonly)||this.tokens.matches1(tt._override)||this.tokens.matches1(tt.nonNullAssertion)?(this.tokens.removeInitialToken(),0):this.tokens.matches1(tt._enum)||this.tokens.matches2(tt._const,tt._enum)?(this.processEnum(),0):!this.tokens.matches2(tt._export,tt._enum)&&!this.tokens.matches3(tt._export,tt._const,tt._enum)||(this.processEnum(!0),0)))}processEnum(t=!1){for(this.tokens.removeInitialToken();this.tokens.matches1(tt._const)||this.tokens.matches1(tt._enum);)this.tokens.removeToken();const e=this.tokens.identifierName();this.tokens.removeToken(),t&&!this.isImportsTransformEnabled&&this.tokens.appendCode("export "),this.tokens.appendCode(`var ${e}; (function (${e})`),this.tokens.copyExpectedToken(tt.braceL),this.processEnumBody(e),this.tokens.copyExpectedToken(tt.braceR),t&&this.isImportsTransformEnabled?this.tokens.appendCode(`)(${e} || (exports.${e} = ${e} = {}));`):this.tokens.appendCode(`)(${e} || (${e} = {}));`)}processEnumBody(t){let e=null;for(;!this.tokens.matches1(tt.braceR);){const{nameStringCode:s,variableName:o}=this.extractEnumKeyInfo(this.tokens.currentToken());this.tokens.removeInitialToken(),this.tokens.matches3(tt.eq,tt.string,tt.comma)||this.tokens.matches3(tt.eq,tt.string,tt.braceR)?this.processStringLiteralEnumMember(t,s,o):this.tokens.matches1(tt.eq)?this.processExplicitValueEnumMember(t,s,o):this.processImplicitValueEnumMember(t,s,o,e),this.tokens.matches1(tt.comma)&&this.tokens.removeToken(),e=null!=o?o:`${t}[${s}]`}}extractEnumKeyInfo(t){if(t.type===tt.name){const e=this.tokens.identifierNameForToken(t);return{nameStringCode:`"${e}"`,variableName:isIdentifier(e)?e:null}}if(t.type===tt.string){const e=this.tokens.stringValueForToken(t);return{nameStringCode:this.tokens.code.slice(t.start,t.end),variableName:isIdentifier(e)?e:null}}throw new Error("Expected name or string at beginning of enum element.")}processStringLiteralEnumMember(t,e,s){null!=s?(this.tokens.appendCode(`const ${s}`),this.tokens.copyToken(),this.tokens.copyToken(),this.tokens.appendCode(`; ${t}[${e}] = ${s};`)):(this.tokens.appendCode(`${t}[${e}]`),this.tokens.copyToken(),this.tokens.copyToken(),this.tokens.appendCode(";"))}processExplicitValueEnumMember(t,e,s){const o=this.tokens.currentToken().rhsEndIndex;if(null==o)throw new Error("Expected rhsEndIndex on enum assign.");if(null!=s){for(this.tokens.appendCode(`const ${s}`),this.tokens.copyToken();this.tokens.currentIndex()<o;)this.rootTransformer.processToken();this.tokens.appendCode(`; ${t}[${t}[${e}] = ${s}] = ${e};`)}else{for(this.tokens.appendCode(`${t}[${t}[${e}]`),this.tokens.copyToken();this.tokens.currentIndex()<o;)this.rootTransformer.processToken();this.tokens.appendCode(`] = ${e};`)}}processImplicitValueEnumMember(t,e,s,o){let n=null!=o?`${o} + 1`:"0";null!=s&&(this.tokens.appendCode(`const ${s} = ${n}; `),n=s),this.tokens.appendCode(`${t}[${t}[${e}] = ${n}] = ${e};`)}}