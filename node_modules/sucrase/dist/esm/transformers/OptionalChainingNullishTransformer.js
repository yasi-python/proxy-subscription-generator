import{TokenType as tt}from"../parser/tokenizer/types";import Transformer from"./Transformer";export default class OptionalChainingNullishTransformer extends Transformer{constructor(t,e){super(),this.tokens=t,this.nameManager=e}process(){if(this.tokens.matches1(tt.nullishCoalescing)){const t=this.tokens.currentToken();return this.tokens.tokens[t.nullishStartIndex].isAsyncOperation?this.tokens.replaceTokenTrimmingLeftWhitespace(", async () => ("):this.tokens.replaceTokenTrimmingLeftWhitespace(", () => ("),!0}if(this.tokens.matches1(tt._delete)){if(this.tokens.tokenAtRelativeIndex(1).isOptionalChainStart)return this.tokens.removeInitialToken(),!0}const t=this.tokens.currentToken().subscriptStartIndex;if(null!=t&&this.tokens.tokens[t].isOptionalChainStart&&this.tokens.tokenAtRelativeIndex(-1).type!==tt._super){const e=this.nameManager.claimFreeName("_");let s;if(s=t>0&&this.tokens.matches1AtIndex(t-1,tt._delete)&&this.isLastSubscriptInChain()?`${e} => delete ${e}`:`${e} => ${e}`,this.tokens.tokens[t].isAsyncOperation&&(s=`async ${s}`),this.tokens.matches2(tt.questionDot,tt.parenL)||this.tokens.matches2(tt.questionDot,tt.lessThan))this.justSkippedSuper()&&this.tokens.appendCode(".bind(this)"),this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalCall', ${s}`);else if(this.tokens.matches2(tt.questionDot,tt.bracketL))this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${s}`);else if(this.tokens.matches1(tt.questionDot))this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'optionalAccess', ${s}.`);else if(this.tokens.matches1(tt.dot))this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${s}.`);else if(this.tokens.matches1(tt.bracketL))this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'access', ${s}[`);else{if(!this.tokens.matches1(tt.parenL))throw new Error("Unexpected subscript operator in optional chain.");this.justSkippedSuper()&&this.tokens.appendCode(".bind(this)"),this.tokens.replaceTokenTrimmingLeftWhitespace(`, 'call', ${s}(`)}return!0}return!1}isLastSubscriptInChain(){let t=0;for(let e=this.tokens.currentIndex()+1;;e++){if(e>=this.tokens.tokens.length)throw new Error("Reached the end of the code while finding the end of the access chain.");if(this.tokens.tokens[e].isOptionalChainStart?t++:this.tokens.tokens[e].isOptionalChainEnd&&t--,t<0)return!0;if(0===t&&null!=this.tokens.tokens[e].subscriptStartIndex)return!1}}justSkippedSuper(){let t=0,e=this.tokens.currentIndex()-1;for(;;){if(e<0)throw new Error("Reached the start of the code while finding the start of the access chain.");if(this.tokens.tokens[e].isOptionalChainStart?t--:this.tokens.tokens[e].isOptionalChainEnd&&t++,t<0)return!1;if(0===t&&null!=this.tokens.tokens[e].subscriptStartIndex)return this.tokens.tokens[e-1].type===tt._super;e--}}}