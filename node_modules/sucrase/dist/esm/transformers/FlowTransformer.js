import{ContextualKeyword}from"../parser/tokenizer/keywords";import{TokenType as tt}from"../parser/tokenizer/types";import Transformer from"./Transformer";export default class FlowTransformer extends Transformer{constructor(e,t,s){super(),this.rootTransformer=e,this.tokens=t,this.isImportsTransformEnabled=s}process(){return!!(this.rootTransformer.processPossibleArrowParamEnd()||this.rootTransformer.processPossibleAsyncArrowWithTypeParams()||this.rootTransformer.processPossibleTypeRange())||(this.tokens.matches1(tt._enum)?(this.processEnum(),!0):this.tokens.matches2(tt._export,tt._enum)?(this.processNamedExportEnum(),!0):!!this.tokens.matches3(tt._export,tt._default,tt._enum)&&(this.processDefaultExportEnum(),!0))}processNamedExportEnum(){if(this.isImportsTransformEnabled){this.tokens.removeInitialToken();const e=this.tokens.identifierNameAtRelativeIndex(1);this.processEnum(),this.tokens.appendCode(` exports.${e} = ${e};`)}else this.tokens.copyToken(),this.processEnum()}processDefaultExportEnum(){this.tokens.removeInitialToken(),this.tokens.removeToken();const e=this.tokens.identifierNameAtRelativeIndex(1);this.processEnum(),this.isImportsTransformEnabled?this.tokens.appendCode(` exports.default = ${e};`):this.tokens.appendCode(` export default ${e};`)}processEnum(){this.tokens.replaceToken("const"),this.tokens.copyExpectedToken(tt.name);let e=!1;this.tokens.matchesContextual(ContextualKeyword._of)&&(this.tokens.removeToken(),e=this.tokens.matchesContextual(ContextualKeyword._symbol),this.tokens.removeToken());const t=this.tokens.matches3(tt.braceL,tt.name,tt.eq);this.tokens.appendCode(' = require("flow-enums-runtime")');const s=!e&&!t;for(this.tokens.replaceTokenTrimmingLeftWhitespace(s?".Mirrored([":"({");!this.tokens.matches1(tt.braceR);){if(this.tokens.matches1(tt.ellipsis)){this.tokens.removeToken();break}this.processEnumElement(e,t),this.tokens.matches1(tt.comma)&&this.tokens.copyToken()}this.tokens.replaceToken(s?"]);":"});")}processEnumElement(e,t){if(e){const e=this.tokens.identifierName();this.tokens.copyToken(),this.tokens.appendCode(`: Symbol("${e}")`)}else t?(this.tokens.copyToken(),this.tokens.replaceTokenTrimmingLeftWhitespace(":"),this.tokens.copyToken()):this.tokens.replaceToken(`"${this.tokens.identifierName()}"`)}}