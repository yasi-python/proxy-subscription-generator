import*as pirates from"pirates";import{transform}from"./index";export function addHook(r,t,e){let o=t;const s=process.env.SUCRASE_OPTIONS;return s&&(o={...o,...JSON.parse(s)}),pirates.addHook((r,t)=>{const{code:e,sourceMap:s}=transform(r,{...o,sourceMapOptions:{compiledFilename:t},filePath:t});return`${e}\n${`//# sourceMappingURL=data:application/json;charset=utf-8;base64,${Buffer.from(JSON.stringify(s)).toString("base64")}`}`},{...e,exts:[r]})}export function registerJS(r){return addHook(".js",{transforms:["imports","flow","jsx"]},r)}export function registerJSX(r){return addHook(".jsx",{transforms:["imports","flow","jsx"]},r)}export function registerTS(r){return addHook(".ts",{transforms:["imports","typescript"]},r)}export function registerTSX(r){return addHook(".tsx",{transforms:["imports","typescript","jsx"]},r)}export function registerTSLegacyModuleInterop(r){return addHook(".ts",{transforms:["imports","typescript"],enableLegacyTypeScriptModuleInterop:!0},r)}export function registerTSXLegacyModuleInterop(r){return addHook(".tsx",{transforms:["imports","typescript","jsx"],enableLegacyTypeScriptModuleInterop:!0},r)}export function registerAll(r){const t=[registerJS(r),registerJSX(r),registerTS(r),registerTSX(r)];return()=>{for(const r of t)r()}}