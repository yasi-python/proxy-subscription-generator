import{GenMapping,maybeAddSegment,toEncodedMap}from"@jridgewell/gen-mapping";import{charCodes}from"./parser/util/charcodes";export default function computeSourceMap({code:e,mappings:o},t,n,r,d){const c=computeSourceColumns(r,d),a=new GenMapping({file:n.compiledFilename});let l=0,m=o[0];for(;void 0===m&&l<o.length-1;)l++,m=o[l];let p=0,i=0;m!==i&&maybeAddSegment(a,p,0,t,p,0);for(let n=0;n<e.length;n++){if(n===m){const e=m-i,r=c[l];for(maybeAddSegment(a,p,e,t,p,r);(m===n||void 0===m)&&l<o.length-1;)l++,m=o[l]}e.charCodeAt(n)===charCodes.lineFeed&&(p++,i=n+1,m!==i&&maybeAddSegment(a,p,0,t,p,0))}const{sourceRoot:s,sourcesContent:u,...g}=toEncodedMap(a);return g}function computeSourceColumns(e,o){const t=new Array(o.length);let n=0,r=o[n].start,d=0;for(let c=0;c<e.length;c++)c===r&&(t[n]=r-d,n++,r=o[n].start),e.charCodeAt(c)===charCodes.lineFeed&&(d=c+1);return t}