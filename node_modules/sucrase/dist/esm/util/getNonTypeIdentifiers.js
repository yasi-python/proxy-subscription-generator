import{IdentifierRole}from"../parser/tokenizer";import{TokenType,TokenType as tt}from"../parser/tokenizer/types";import{startsWithLowerCase}from"../transformers/JSXTransformer";import getJSXPragmaInfo from"./getJSXPragmaInfo";export function getNonTypeIdentifiers(e,t){const o=getJSXPragmaInfo(t),r=new Set;for(let t=0;t<e.tokens.length;t++){const n=e.tokens[t];if(n.type!==tt.name||n.isType||n.identifierRole!==IdentifierRole.Access&&n.identifierRole!==IdentifierRole.ObjectShorthand&&n.identifierRole!==IdentifierRole.ExportAccess||n.shadowsGlobal||r.add(e.identifierNameForToken(n)),n.type===tt.jsxTagStart&&r.add(o.base),n.type===tt.jsxTagStart&&t+1<e.tokens.length&&e.tokens[t+1].type===tt.jsxTagEnd&&(r.add(o.base),r.add(o.fragmentBase)),n.type===tt.jsxName&&n.identifierRole===IdentifierRole.Access){const o=e.identifierNameForToken(n);startsWithLowerCase(o)&&e.tokens[t+1].type!==TokenType.dot||r.add(e.identifierNameForToken(n))}}return r}