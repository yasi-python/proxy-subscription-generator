import{TokenType as tt}from"../parser/tokenizer/types";import getImportExportSpecifierInfo from"./getImportExportSpecifierInfo";export default function getTSImportedNames(t){const e=new Set;for(let r=0;r<t.tokens.length;r++)t.matches1AtIndex(r,tt._import)&&!t.matches3AtIndex(r,tt._import,tt.name,tt.eq)&&collectNamesForImport(t,r,e);return e}function collectNamesForImport(t,e,r){e++,t.matches1AtIndex(e,tt.parenL)||(t.matches1AtIndex(e,tt.name)&&(r.add(t.identifierNameAtIndex(e)),e++,t.matches1AtIndex(e,tt.comma)&&e++),t.matches1AtIndex(e,tt.star)&&(e+=2,r.add(t.identifierNameAtIndex(e)),e++),t.matches1AtIndex(e,tt.braceL)&&collectNamesForNamedImport(t,++e,r))}function collectNamesForNamedImport(t,e,r){for(;;){if(t.matches1AtIndex(e,tt.braceR))return;const o=getImportExportSpecifierInfo(t,e);if(e=o.endIndex,o.isType||r.add(o.rightName),t.matches2AtIndex(e,tt.comma,tt.braceR))return;if(t.matches1AtIndex(e,tt.braceR))return;if(!t.matches1AtIndex(e,tt.comma))throw new Error(`Unexpected token: ${JSON.stringify(t.tokens[e])}`);e++}}