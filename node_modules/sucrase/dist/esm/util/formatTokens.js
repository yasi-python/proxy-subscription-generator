import LinesAndColumns from"lines-and-columns";import{formatTokenType}from"../parser/tokenizer/types";export default function formatTokens(n,t){if(0===t.length)return"";const e=Object.keys(t[0]).filter(n=>"type"!==n&&"value"!==n&&"start"!==n&&"end"!==n&&"loc"!==n),o=Object.keys(t[0].type).filter(n=>"label"!==n&&"keyword"!==n),r=["Location","Label","Raw",...e,...o],a=new LinesAndColumns(n),l=[r,...t.map(function(t){const r=n.slice(t.start,t.end);return[(a=t.start,l=t.end,`${s(a)}-${s(l)}`),formatTokenType(t.type),truncate(String(r),14),...e.map(n=>c(t[n],n)),...o.map(n=>c(t.type[n],n))];var a,l})],i=r.map(()=>0);for(const n of l)for(let t=0;t<n.length;t++)i[t]=Math.max(i[t],n[t].length);return l.map(n=>n.map((n,t)=>n.padEnd(i[t])).join(" ")).join("\n");function c(n,t){return!0===n?t:!1===n||null===n?"":String(n)}function s(n){const t=a.locationForIndex(n);return t?`${t.line+1}:${t.column+1}`:"Unknown"}}function truncate(n,t){return n.length>t?`${n.slice(0,t-3)}...`:n}