"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var _linesandcolumns=require("lines-and-columns"),_linesandcolumns2=_interopRequireDefault(_linesandcolumns),_types=require("../parser/tokenizer/types");function formatTokens(e,n){if(0===n.length)return"";const t=Object.keys(n[0]).filter(e=>"type"!==e&&"value"!==e&&"start"!==e&&"end"!==e&&"loc"!==e),r=Object.keys(n[0].type).filter(e=>"label"!==e&&"keyword"!==e),o=["Location","Label","Raw",...t,...r],l=new(0,_linesandcolumns2.default)(e),a=[o,...n.map(function(n){const o=e.slice(n.start,n.end);return[(l=n.start,a=n.end,`${s(l)}-${s(a)}`),_types.formatTokenType.call(void 0,n.type),truncate(String(o),14),...t.map(e=>i(n[e],e)),...r.map(e=>i(n.type[e],e))];var l,a})],u=o.map(()=>0);for(const e of a)for(let n=0;n<e.length;n++)u[n]=Math.max(u[n],e[n].length);return a.map(e=>e.map((e,n)=>e.padEnd(u[n])).join(" ")).join("\n");function i(e,n){return!0===e?n:!1===e||null===e?"":String(e)}function s(e){const n=l.locationForIndex(e);return n?`${n.line+1}:${n.column+1}`:"Unknown"}}function truncate(e,n){return e.length>n?`${e.slice(0,n-3)}...`:e}exports.default=formatTokens;