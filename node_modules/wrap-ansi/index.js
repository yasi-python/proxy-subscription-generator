import stringWidth from"string-width";import stripAnsi from"strip-ansi";import ansiStyles from"ansi-styles";const ESCAPES=new Set(["","Â›"]),END_CODE=39,ANSI_ESCAPE_BELL="",ANSI_CSI="[",ANSI_OSC="]",ANSI_SGR_TERMINATOR="m",ANSI_ESCAPE_LINK="]8;;",wrapAnsiCode=t=>`${ESCAPES.values().next().value}[${t}m`,wrapAnsiHyperlink=t=>`${ESCAPES.values().next().value}]8;;${t}`,wordLengths=t=>t.split(" ").map(t=>stringWidth(t)),wrapWord=(t,i,n)=>{const r=[...i];let e=!1,s=!1,o=stringWidth(stripAnsi(t[t.length-1]));for(const[i,l]of r.entries()){const p=stringWidth(l);o+p<=n?t[t.length-1]+=l:(t.push(l),o=0),ESCAPES.has(l)&&(e=!0,s=r.slice(i+1).join("").startsWith("]8;;")),e?s?""===l&&(e=!1,s=!1):"m"===l&&(e=!1):(o+=p,o===n&&i<r.length-1&&(t.push(""),o=0))}!o&&t[t.length-1].length>0&&t.length>1&&(t[t.length-2]+=t.pop())},stringVisibleTrimSpacesRight=t=>{const i=t.split(" ");let n=i.length;for(;n>0&&!(stringWidth(i[n-1])>0);)n--;return n===i.length?t:i.slice(0,n).join(" ")+i.slice(n).join("")},exec=(t,i,n={})=>{if(!1!==n.trim&&""===t.trim())return"";let r,e,s="";const o=wordLengths(t);let l=[""];for(const[r,e]of t.split(" ").entries()){!1!==n.trim&&(l[l.length-1]=l[l.length-1].trimStart());let t=stringWidth(l[l.length-1]);if(0!==r&&(t>=i&&(!1===n.wordWrap||!1===n.trim)&&(l.push(""),t=0),(t>0||!1===n.trim)&&(l[l.length-1]+=" ",t++)),n.hard&&o[r]>i){const n=i-t,s=1+Math.floor((o[r]-n-1)/i);Math.floor((o[r]-1)/i)<s&&l.push(""),wrapWord(l,e,i);continue}if(t+o[r]>i&&t>0&&o[r]>0){if(!1===n.wordWrap&&t<i){wrapWord(l,e,i);continue}l.push("")}t+o[r]>i&&!1===n.wordWrap?wrapWord(l,e,i):l[l.length-1]+=e}!1!==n.trim&&(l=l.map(t=>stringVisibleTrimSpacesRight(t)));const p=[...l.join("\n")];for(const[t,i]of p.entries()){if(s+=i,ESCAPES.has(i)){const{groups:i}=new RegExp("(?:\\[(?<code>\\d+)m|\\]8;;(?<uri>.*))").exec(p.slice(t).join(""))||{groups:{}};if(void 0!==i.code){const t=Number.parseFloat(i.code);r=39===t?void 0:t}else void 0!==i.uri&&(e=0===i.uri.length?void 0:i.uri)}const n=ansiStyles.codes.get(Number(r));"\n"===p[t+1]?(e&&(s+=wrapAnsiHyperlink("")),r&&n&&(s+=wrapAnsiCode(n))):"\n"===i&&(r&&n&&(s+=wrapAnsiCode(r)),e&&(s+=wrapAnsiHyperlink(e)))}return s};export default function wrapAnsi(t,i,n){return String(t).normalize().replace(/\r\n/g,"\n").split("\n").map(t=>exec(t,i,n)).join("\n")}