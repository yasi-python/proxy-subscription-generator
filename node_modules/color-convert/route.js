const conversions=require("./conversions");function buildGraph(){const n={},e=Object.keys(conversions);for(let t=e.length,r=0;r<t;r++)n[e[r]]={distance:-1,parent:null};return n}function deriveBFS(n){const e=buildGraph(),t=[n];for(e[n].distance=0;t.length;){const n=t.pop(),r=Object.keys(conversions[n]);for(let o=r.length,s=0;s<o;s++){const o=r[s],c=e[o];-1===c.distance&&(c.distance=e[n].distance+1,c.parent=n,t.unshift(o))}}return e}function link(n,e){return function(t){return e(n(t))}}function wrapConversion(n,e){const t=[e[n].parent,n];let r=conversions[e[n].parent][n],o=e[n].parent;for(;e[o].parent;)t.unshift(e[o].parent),r=link(conversions[e[o].parent][o],r),o=e[o].parent;return r.conversion=t,r}module.exports=function(n){const e=deriveBFS(n),t={},r=Object.keys(e);for(let n=r.length,o=0;o<n;o++){const n=r[o];null!==e[n].parent&&(t[n]=wrapConversion(n,e))}return t};