"use strict";var identity=require("./nodes/identity.js");const BREAK=Symbol("break visit"),SKIP=Symbol("skip children"),REMOVE=Symbol("remove node");function visit(i,t){const e=initVisitor(t);identity.isDocument(i)?visit_(null,i.contents,e,Object.freeze([i]))===REMOVE&&(i.contents=null):visit_(null,i,e,Object.freeze([]))}function visit_(i,t,e,n){const s=callVisitor(i,t,e,n);if(identity.isNode(s)||identity.isPair(s))return replaceNode(i,n,s),visit_(i,s,e,n);if("symbol"!=typeof s)if(identity.isCollection(t)){n=Object.freeze(n.concat(t));for(let i=0;i<t.items.length;++i){const s=visit_(i,t.items[i],e,n);if("number"==typeof s)i=s-1;else{if(s===BREAK)return BREAK;s===REMOVE&&(t.items.splice(i,1),i-=1)}}}else if(identity.isPair(t)){n=Object.freeze(n.concat(t));const i=visit_("key",t.key,e,n);if(i===BREAK)return BREAK;i===REMOVE&&(t.key=null);const s=visit_("value",t.value,e,n);if(s===BREAK)return BREAK;s===REMOVE&&(t.value=null)}return s}async function visitAsync(i,t){const e=initVisitor(t);identity.isDocument(i)?await visitAsync_(null,i.contents,e,Object.freeze([i]))===REMOVE&&(i.contents=null):await visitAsync_(null,i,e,Object.freeze([]))}async function visitAsync_(i,t,e,n){const s=await callVisitor(i,t,e,n);if(identity.isNode(s)||identity.isPair(s))return replaceNode(i,n,s),visitAsync_(i,s,e,n);if("symbol"!=typeof s)if(identity.isCollection(t)){n=Object.freeze(n.concat(t));for(let i=0;i<t.items.length;++i){const s=await visitAsync_(i,t.items[i],e,n);if("number"==typeof s)i=s-1;else{if(s===BREAK)return BREAK;s===REMOVE&&(t.items.splice(i,1),i-=1)}}}else if(identity.isPair(t)){n=Object.freeze(n.concat(t));const i=await visitAsync_("key",t.key,e,n);if(i===BREAK)return BREAK;i===REMOVE&&(t.key=null);const s=await visitAsync_("value",t.value,e,n);if(s===BREAK)return BREAK;s===REMOVE&&(t.value=null)}return s}function initVisitor(i){return"object"==typeof i&&(i.Collection||i.Node||i.Value)?Object.assign({Alias:i.Node,Map:i.Node,Scalar:i.Node,Seq:i.Node},i.Value&&{Map:i.Value,Scalar:i.Value,Seq:i.Value},i.Collection&&{Map:i.Collection,Seq:i.Collection},i):i}function callVisitor(i,t,e,n){return"function"==typeof e?e(i,t,n):identity.isMap(t)?e.Map?.(i,t,n):identity.isSeq(t)?e.Seq?.(i,t,n):identity.isPair(t)?e.Pair?.(i,t,n):identity.isScalar(t)?e.Scalar?.(i,t,n):identity.isAlias(t)?e.Alias?.(i,t,n):void 0}function replaceNode(i,t,e){const n=t[t.length-1];if(identity.isCollection(n))n.items[i]=e;else if(identity.isPair(n))"key"===i?n.key=e:n.value=e;else{if(!identity.isDocument(n)){const i=identity.isAlias(n)?"alias":"scalar";throw new Error(`Cannot replace node with ${i} parent`)}n.contents=e}}visit.BREAK=BREAK,visit.SKIP=SKIP,visit.REMOVE=REMOVE,visitAsync.BREAK=BREAK,visitAsync.SKIP=SKIP,visitAsync.REMOVE=REMOVE,exports.visit=visit,exports.visitAsync=visitAsync;