"use strict";var identity=require("./nodes/identity.js");const BREAK=Symbol("break visit"),SKIP=Symbol("skip children"),REMOVE=Symbol("remove node");function visit(i,e){const t=initVisitor(e);if(identity.isDocument(i)){visit_(null,i.contents,t,Object.freeze([i]))===REMOVE&&(i.contents=null)}else visit_(null,i,t,Object.freeze([]))}function visit_(i,e,t,n){const s=callVisitor(i,e,t,n);if(identity.isNode(s)||identity.isPair(s))return replaceNode(i,n,s),visit_(i,s,t,n);if("symbol"!=typeof s)if(identity.isCollection(e)){n=Object.freeze(n.concat(e));for(let i=0;i<e.items.length;++i){const s=visit_(i,e.items[i],t,n);if("number"==typeof s)i=s-1;else{if(s===BREAK)return BREAK;s===REMOVE&&(e.items.splice(i,1),i-=1)}}}else if(identity.isPair(e)){n=Object.freeze(n.concat(e));const i=visit_("key",e.key,t,n);if(i===BREAK)return BREAK;i===REMOVE&&(e.key=null);const s=visit_("value",e.value,t,n);if(s===BREAK)return BREAK;s===REMOVE&&(e.value=null)}return s}async function visitAsync(i,e){const t=initVisitor(e);if(identity.isDocument(i)){await visitAsync_(null,i.contents,t,Object.freeze([i]))===REMOVE&&(i.contents=null)}else await visitAsync_(null,i,t,Object.freeze([]))}async function visitAsync_(i,e,t,n){const s=await callVisitor(i,e,t,n);if(identity.isNode(s)||identity.isPair(s))return replaceNode(i,n,s),visitAsync_(i,s,t,n);if("symbol"!=typeof s)if(identity.isCollection(e)){n=Object.freeze(n.concat(e));for(let i=0;i<e.items.length;++i){const s=await visitAsync_(i,e.items[i],t,n);if("number"==typeof s)i=s-1;else{if(s===BREAK)return BREAK;s===REMOVE&&(e.items.splice(i,1),i-=1)}}}else if(identity.isPair(e)){n=Object.freeze(n.concat(e));const i=await visitAsync_("key",e.key,t,n);if(i===BREAK)return BREAK;i===REMOVE&&(e.key=null);const s=await visitAsync_("value",e.value,t,n);if(s===BREAK)return BREAK;s===REMOVE&&(e.value=null)}return s}function initVisitor(i){return"object"==typeof i&&(i.Collection||i.Node||i.Value)?Object.assign({Alias:i.Node,Map:i.Node,Scalar:i.Node,Seq:i.Node},i.Value&&{Map:i.Value,Scalar:i.Value,Seq:i.Value},i.Collection&&{Map:i.Collection,Seq:i.Collection},i):i}function callVisitor(i,e,t,n){return"function"==typeof t?t(i,e,n):identity.isMap(e)?t.Map?.(i,e,n):identity.isSeq(e)?t.Seq?.(i,e,n):identity.isPair(e)?t.Pair?.(i,e,n):identity.isScalar(e)?t.Scalar?.(i,e,n):identity.isAlias(e)?t.Alias?.(i,e,n):void 0}function replaceNode(i,e,t){const n=e[e.length-1];if(identity.isCollection(n))n.items[i]=t;else if(identity.isPair(n))"key"===i?n.key=t:n.value=t;else{if(!identity.isDocument(n)){const i=identity.isAlias(n)?"alias":"scalar";throw new Error(`Cannot replace node with ${i} parent`)}n.contents=t}}visit.BREAK=BREAK,visit.SKIP=SKIP,visit.REMOVE=REMOVE,visitAsync.BREAK=BREAK,visitAsync.SKIP=SKIP,visitAsync.REMOVE=REMOVE,exports.visit=visit,exports.visitAsync=visitAsync;