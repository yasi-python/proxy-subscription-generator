"use strict";var createNode=require("../doc/createNode.js"),stringifyCollection=require("../stringify/stringifyCollection.js"),Collection=require("./Collection.js"),identity=require("./identity.js"),Scalar=require("./Scalar.js"),toJS=require("./toJS.js");class YAMLSeq extends Collection.Collection{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(identity.SEQ,e),this.items=[]}add(e){this.items.push(e)}delete(e){const t=asItemIndex(e);if("number"!=typeof t)return!1;return this.items.splice(t,1).length>0}get(e,t){const i=asItemIndex(e);if("number"!=typeof i)return;const r=this.items[i];return!t&&identity.isScalar(r)?r.value:r}has(e){const t=asItemIndex(e);return"number"==typeof t&&t<this.items.length}set(e,t){const i=asItemIndex(e);if("number"!=typeof i)throw new Error(`Expected a valid index, not ${e}.`);const r=this.items[i];identity.isScalar(r)&&Scalar.isScalarValue(t)?r.value=t:this.items[i]=t}toJSON(e,t){const i=[];t?.onCreate&&t.onCreate(i);let r=0;for(const e of this.items)i.push(toJS.toJS(e,String(r++),t));return i}toString(e,t,i){return e?stringifyCollection.stringifyCollection(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:i,onComment:t}):JSON.stringify(this)}static from(e,t,i){const{replacer:r}=i,n=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(let s of t){if("function"==typeof r){const i=t instanceof Set?s:String(e++);s=r.call(t,i,s)}n.items.push(createNode.createNode(s,void 0,i))}}return n}}function asItemIndex(e){let t=identity.isScalar(e)?e.value:e;return t&&"string"==typeof t&&(t=Number(t)),"number"==typeof t&&Number.isInteger(t)&&t>=0?t:null}exports.YAMLSeq=YAMLSeq;