"use strict";var stringifyCollection=require("../stringify/stringifyCollection.js"),addPairToJSMap=require("./addPairToJSMap.js"),Collection=require("./Collection.js"),identity=require("./identity.js"),Pair=require("./Pair.js"),Scalar=require("./Scalar.js");function findPair(i,e){const t=identity.isScalar(e)?e.value:e;for(const r of i)if(identity.isPair(r)){if(r.key===e||r.key===t)return r;if(identity.isScalar(r.key)&&r.key.value===t)return r}}class YAMLMap extends Collection.Collection{static get tagName(){return"tag:yaml.org,2002:map"}constructor(i){super(identity.MAP,i),this.items=[]}static from(i,e,t){const{keepUndefined:r,replacer:s}=t,a=new this(i),n=(i,n)=>{if("function"==typeof s)n=s.call(e,i,n);else if(Array.isArray(s)&&!s.includes(i))return;(void 0!==n||r)&&a.items.push(Pair.createPair(i,n,t))};if(e instanceof Map)for(const[i,t]of e)n(i,t);else if(e&&"object"==typeof e)for(const i of Object.keys(e))n(i,e[i]);return"function"==typeof i.sortMapEntries&&a.items.sort(i.sortMapEntries),a}add(i,e){let t;t=identity.isPair(i)?i:i&&"object"==typeof i&&"key"in i?new Pair.Pair(i.key,i.value):new Pair.Pair(i,i?.value);const r=findPair(this.items,t.key),s=this.schema?.sortMapEntries;if(r){if(!e)throw new Error(`Key ${t.key} already set`);identity.isScalar(r.value)&&Scalar.isScalarValue(t.value)?r.value.value=t.value:r.value=t.value}else if(s){const i=this.items.findIndex(i=>s(t,i)<0);-1===i?this.items.push(t):this.items.splice(i,0,t)}else this.items.push(t)}delete(i){const e=findPair(this.items,i);return!!e&&this.items.splice(this.items.indexOf(e),1).length>0}get(i,e){const t=findPair(this.items,i),r=t?.value;return(!e&&identity.isScalar(r)?r.value:r)??void 0}has(i){return!!findPair(this.items,i)}set(i,e){this.add(new Pair.Pair(i,e),!0)}toJSON(i,e,t){const r=t?new t:e?.mapAsMap?new Map:{};e?.onCreate&&e.onCreate(r);for(const i of this.items)addPairToJSMap.addPairToJSMap(e,r,i);return r}toString(i,e,t){if(!i)return JSON.stringify(this);for(const i of this.items)if(!identity.isPair(i))throw new Error(`Map items must all be pairs; found ${JSON.stringify(i)} instead`);return!i.allNullValues&&this.hasAllNullValues(!1)&&(i=Object.assign({},i,{allNullValues:!0})),stringifyCollection.stringifyCollection(this,i,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:i.indent||"",onChompKeep:t,onComment:e})}}exports.YAMLMap=YAMLMap,exports.findPair=findPair;