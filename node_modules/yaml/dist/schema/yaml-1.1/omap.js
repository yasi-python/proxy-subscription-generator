"use strict";var identity=require("../../nodes/identity.js"),toJS=require("../../nodes/toJS.js"),YAMLMap=require("../../nodes/YAMLMap.js"),YAMLSeq=require("../../nodes/YAMLSeq.js"),pairs=require("./pairs.js");class YAMLOMap extends YAMLSeq.YAMLSeq{constructor(){super(),this.add=YAMLMap.YAMLMap.prototype.add.bind(this),this.delete=YAMLMap.YAMLMap.prototype.delete.bind(this),this.get=YAMLMap.YAMLMap.prototype.get.bind(this),this.has=YAMLMap.YAMLMap.prototype.has.bind(this),this.set=YAMLMap.YAMLMap.prototype.set.bind(this),this.tag=YAMLOMap.tag}toJSON(e,t){if(!t)return super.toJSON(e);const s=new Map;t?.onCreate&&t.onCreate(s);for(const e of this.items){let a,o;if(identity.isPair(e)?(a=toJS.toJS(e.key,"",t),o=toJS.toJS(e.value,a,t)):a=toJS.toJS(e,"",t),s.has(a))throw new Error("Ordered maps must not include duplicate keys");s.set(a,o)}return s}static from(e,t,s){const a=pairs.createPairs(e,t,s),o=new this;return o.items=a.items,o}}YAMLOMap.tag="tag:yaml.org,2002:omap";const omap={collection:"seq",identify:e=>e instanceof Map,nodeClass:YAMLOMap,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){const s=pairs.resolvePairs(e,t),a=[];for(const{key:e}of s.items)identity.isScalar(e)&&(a.includes(e.value)?t(`Ordered maps must not include duplicate keys: ${e.value}`):a.push(e.value));return Object.assign(new YAMLOMap,s)},createNode:(e,t,s)=>YAMLOMap.from(e,t,s)};exports.YAMLOMap=YAMLOMap,exports.omap=omap;