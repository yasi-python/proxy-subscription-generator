"use strict";var node_buffer=require("buffer"),Scalar=require("../../nodes/Scalar.js"),stringifyString=require("../../stringify/stringifyString.js");const binary={identify:r=>r instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(r,e){if("function"==typeof node_buffer.Buffer)return node_buffer.Buffer.from(r,"base64");if("function"==typeof atob){const e=atob(r.replace(/[\n\r]/g,"")),t=new Uint8Array(e.length);for(let r=0;r<e.length;++r)t[r]=e.charCodeAt(r);return t}return e("This environment does not support reading binary tags; either Buffer or atob is required"),r},stringify({comment:r,type:e,value:t},n,i,f){if(!t)return"";const o=t;let a;if("function"==typeof node_buffer.Buffer)a=o instanceof node_buffer.Buffer?o.toString("base64"):node_buffer.Buffer.from(o.buffer).toString("base64");else{if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let r="";for(let e=0;e<o.length;++e)r+=String.fromCharCode(o[e]);a=btoa(r)}}if(e??(e=Scalar.Scalar.BLOCK_LITERAL),e!==Scalar.Scalar.QUOTE_DOUBLE){const r=Math.max(n.options.lineWidth-n.indent.length,n.options.minContentWidth),t=Math.ceil(a.length/r),i=new Array(t);for(let e=0,n=0;e<t;++e,n+=r)i[e]=a.substr(n,r);a=i.join(e===Scalar.Scalar.BLOCK_LITERAL?"\n":" ")}return stringifyString.stringifyString({comment:r,type:e,value:a},n,i,f)}};exports.binary=binary;