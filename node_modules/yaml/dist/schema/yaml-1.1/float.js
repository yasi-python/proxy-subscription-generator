"use strict";var Scalar=require("../../nodes/Scalar.js"),stringifyNumber=require("../../stringify/stringifyNumber.js");const floatNaN={identify:t=>"number"==typeof t,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:t=>"nan"===t.slice(-3).toLowerCase()?NaN:"-"===t[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:stringifyNumber.stringifyNumber},floatExp={identify:t=>"number"==typeof t,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:t=>parseFloat(t.replace(/_/g,"")),stringify(t){const e=Number(t.value);return isFinite(e)?e.toExponential():stringifyNumber.stringifyNumber(t)}},float={identify:t=>"number"==typeof t,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(t){const e=new Scalar.Scalar(parseFloat(t.replace(/_/g,""))),r=t.indexOf(".");if(-1!==r){const a=t.substring(r+1).replace(/_/g,"");"0"===a[a.length-1]&&(e.minFractionDigits=a.length)}return e},stringify:stringifyNumber.stringifyNumber};exports.float=float,exports.floatExp=floatExp,exports.floatNaN=floatNaN;