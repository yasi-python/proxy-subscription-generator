"use strict";var identity=require("../../nodes/identity.js"),Pair=require("../../nodes/Pair.js"),Scalar=require("../../nodes/Scalar.js"),YAMLSeq=require("../../nodes/YAMLSeq.js");function resolvePairs(e,t){if(identity.isSeq(e))for(let r=0;r<e.items.length;++r){let i=e.items[r];if(!identity.isPair(i)){if(identity.isMap(i)){i.items.length>1&&t("Each pair must have its own sequence indicator");const e=i.items[0]||new Pair.Pair(new Scalar.Scalar(null));if(i.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${i.commentBefore}\n${e.key.commentBefore}`:i.commentBefore),i.comment){const t=e.value??e.key;t.comment=t.comment?`${i.comment}\n${t.comment}`:i.comment}i=e}e.items[r]=identity.isPair(i)?i:new Pair.Pair(i)}}else t("Expected a sequence for this tag");return e}function createPairs(e,t,r){const{replacer:i}=r,a=new YAMLSeq.YAMLSeq(e);a.tag="tag:yaml.org,2002:pairs";let n=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let s,o;if("function"==typeof i&&(e=i.call(t,String(n++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);s=e[0],o=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);s=t[0],o=e[s]}else s=e;a.items.push(Pair.createPair(s,o,r))}return a}const pairs={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:resolvePairs,createNode:createPairs};exports.createPairs=createPairs,exports.pairs=pairs,exports.resolvePairs=resolvePairs;