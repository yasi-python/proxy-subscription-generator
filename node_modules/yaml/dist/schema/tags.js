"use strict";var map=require("./common/map.js"),_null=require("./common/null.js"),seq=require("./common/seq.js"),string=require("./common/string.js"),bool=require("./core/bool.js"),float=require("./core/float.js"),int=require("./core/int.js"),schema=require("./core/schema.js"),schema$1=require("./json/schema.js"),binary=require("./yaml-1.1/binary.js"),merge=require("./yaml-1.1/merge.js"),omap=require("./yaml-1.1/omap.js"),pairs=require("./yaml-1.1/pairs.js"),schema$2=require("./yaml-1.1/schema.js"),set=require("./yaml-1.1/set.js"),timestamp=require("./yaml-1.1/timestamp.js");const schemas=new Map([["core",schema.schema],["failsafe",[map.map,seq.seq,string.string]],["json",schema$1.schema],["yaml11",schema$2.schema],["yaml-1.1",schema$2.schema]]),tagsByName={binary:binary.binary,bool:bool.boolTag,float:float.float,floatExp:float.floatExp,floatNaN:float.floatNaN,floatTime:timestamp.floatTime,int:int.int,intHex:int.intHex,intOct:int.intOct,intTime:timestamp.intTime,map:map.map,merge:merge.merge,null:_null.nullTag,omap:omap.omap,pairs:pairs.pairs,seq:seq.seq,set:set.set,timestamp:timestamp.timestamp},coreKnownTags={"tag:yaml.org,2002:binary":binary.binary,"tag:yaml.org,2002:merge":merge.merge,"tag:yaml.org,2002:omap":omap.omap,"tag:yaml.org,2002:pairs":pairs.pairs,"tag:yaml.org,2002:set":set.set,"tag:yaml.org,2002:timestamp":timestamp.timestamp};function getTags(e,a,r){const s=schemas.get(a);if(s&&!e)return r&&!s.includes(merge.merge)?s.concat(merge.merge):s.slice();let t=s;if(!t){if(!Array.isArray(e)){const e=Array.from(schemas.keys()).filter(e=>"yaml11"!==e).map(e=>JSON.stringify(e)).join(", ");throw new Error(`Unknown schema "${a}"; use one of ${e} or define customTags array`)}t=[]}if(Array.isArray(e))for(const a of e)t=t.concat(a);else"function"==typeof e&&(t=e(t.slice()));return r&&(t=t.concat(merge.merge)),t.reduce((e,a)=>{const r="string"==typeof a?tagsByName[a]:a;if(!r){const e=JSON.stringify(a),r=Object.keys(tagsByName).map(e=>JSON.stringify(e)).join(", ");throw new Error(`Unknown custom tag ${e}; use one of ${r}`)}return e.includes(r)||e.push(r),e},[])}exports.coreKnownTags=coreKnownTags,exports.getTags=getTags;