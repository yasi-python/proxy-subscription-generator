"use strict";var identity=require("../nodes/identity.js"),visit=require("../visit.js");function anchorIsValid(n){if(/[\x00-\x19\s,[\]{}]/.test(n)){const o=JSON.stringify(n);throw new Error(`Anchor must not contain whitespace or control characters: ${o}`)}return!0}function anchorNames(n){const o=new Set;return visit.visit(n,{Value(n,e){e.anchor&&o.add(e.anchor)}}),o}function findNewAnchor(n,o){for(let e=1;;++e){const r=`${n}${e}`;if(!o.has(r))return r}}function createNodeAnchors(n,o){const e=[],r=new Map;let t=null;return{onAnchor:r=>{e.push(r),t??(t=anchorNames(n));const c=findNewAnchor(o,t);return t.add(c),c},setAnchors:()=>{for(const n of e){const o=r.get(n);if("object"!=typeof o||!o.anchor||!identity.isScalar(o.node)&&!identity.isCollection(o.node)){const o=new Error("Failed to resolve repeated object (this should not happen)");throw o.source=n,o}o.node.anchor=o.anchor}},sourceObjects:r}}exports.anchorIsValid=anchorIsValid,exports.anchorNames=anchorNames,exports.createNodeAnchors=createNodeAnchors,exports.findNewAnchor=findNewAnchor;