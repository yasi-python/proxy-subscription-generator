import{Scalar}from"../nodes/Scalar.js";import{resolveEnd}from"./resolve-end.js";function resolveFlowScalar(e,t,n){const{offset:r,type:a,source:s,end:l}=e;let o,c;const i=(e,t,a)=>n(r+e,t,a);switch(a){case"scalar":o=Scalar.PLAIN,c=plainValue(s,i);break;case"single-quoted-scalar":o=Scalar.QUOTE_SINGLE,c=singleQuotedValue(s,i);break;case"double-quoted-scalar":o=Scalar.QUOTE_DOUBLE,c=doubleQuotedValue(s,i);break;default:return n(e,"UNEXPECTED_TOKEN",`Expected a flow scalar value, but found: ${a}`),{value:"",type:null,comment:"",range:[r,r+s.length,r+s.length]}}const u=r+s.length,f=resolveEnd(l,u,t,n);return{value:c,type:o,comment:f.comment,range:[r,u,f.offset]}}function plainValue(e,t){let n="";switch(e[0]){case"\t":n="a tab character";break;case",":n="flow indicator character ,";break;case"%":n="directive indicator character %";break;case"|":case">":n=`block scalar indicator ${e[0]}`;break;case"@":case"`":n=`reserved character ${e[0]}`}return n&&t(0,"BAD_SCALAR_START",`Plain value cannot start with ${n}`),foldLines(e)}function singleQuotedValue(e,t){return"'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote"),foldLines(e.slice(1,-1)).replace(/''/g,"'")}function foldLines(e){let t,n;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),n=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,n=/[ \t]*(.*?)[ \t]*\r?\n/sy}let r=t.exec(e);if(!r)return e;let a=r[1],s=" ",l=t.lastIndex;for(n.lastIndex=l;r=n.exec(e);)""===r[1]?"\n"===s?a+=s:s="\n":(a+=s+r[1],s=" "),l=n.lastIndex;const o=/[ \t]*(.*)/sy;return o.lastIndex=l,r=o.exec(e),a+s+(r?.[1]??"")}function doubleQuotedValue(e,t){let n="";for(let r=1;r<e.length-1;++r){const a=e[r];if("\r"!==a||"\n"!==e[r+1])if("\n"===a){const{fold:t,offset:a}=foldNewline(e,r);n+=t,r=a}else if("\\"===a){let a=e[++r];const s=escapeCodes[a];if(s)n+=s;else if("\n"===a)for(a=e[r+1];" "===a||"\t"===a;)a=e[1+ ++r];else if("\r"===a&&"\n"===e[r+1])for(a=e[1+ ++r];" "===a||"\t"===a;)a=e[1+ ++r];else if("x"===a||"u"===a||"U"===a){const s={x:2,u:4,U:8}[a];n+=parseCharCode(e,r+1,s,t),r+=s}else{const a=e.substr(r-1,2);t(r-1,"BAD_DQ_ESCAPE",`Invalid escape sequence ${a}`),n+=a}}else if(" "===a||"\t"===a){const t=r;let s=e[r+1];for(;" "===s||"\t"===s;)s=e[1+ ++r];"\n"===s||"\r"===s&&"\n"===e[r+2]||(n+=r>t?e.slice(t,r+1):a)}else n+=a}return'"'===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR",'Missing closing "quote'),n}function foldNewline(e,t){let n="",r=e[t+1];for(;!(" "!==r&&"\t"!==r&&"\n"!==r&&"\r"!==r||"\r"===r&&"\n"!==e[t+2]);)"\n"===r&&(n+="\n"),r=e[(t+=1)+1];return n||(n=" "),{fold:n,offset:t}}const escapeCodes={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"Â…",_:"Â ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function parseCharCode(e,t,n,r){const a=e.substr(t,n),s=a.length===n&&/^[0-9a-fA-F]+$/.test(a)?parseInt(a,16):NaN;if(isNaN(s)){const a=e.substr(t-2,n+2);return r(t-2,"BAD_DQ_ESCAPE",`Invalid escape sequence ${a}`),a}return String.fromCodePoint(s)}export{resolveFlowScalar};