import{isNode}from"../nodes/identity.js";import{createStringifyContext,stringify}from"./stringify.js";import{indentComment,lineComment}from"./stringifyComment.js";function stringifyDocument(t,n){const e=[];let o=!0===n.directives;if(!1!==n.directives&&t.directives){const n=t.directives.toString(t);n?(e.push(n),o=!0):t.directives.docStart&&(o=!0)}o&&e.push("---");const i=createStringifyContext(t,n),{commentString:s}=i.options;if(t.commentBefore){1!==e.length&&e.unshift("");const n=s(t.commentBefore);e.unshift(indentComment(n,""))}let m=!1,c=null;if(t.contents){if(isNode(t.contents)){if(t.contents.spaceBefore&&o&&e.push(""),t.contents.commentBefore){const n=s(t.contents.commentBefore);e.push(indentComment(n,""))}i.forceBlockIndent=!!t.comment,c=t.contents.comment}const n=c?void 0:()=>m=!0;let r=stringify(t.contents,i,()=>c=null,n);c&&(r+=lineComment(r,"",s(c))),"|"!==r[0]&&">"!==r[0]||"---"!==e[e.length-1]?e.push(r):e[e.length-1]=`--- ${r}`}else e.push(stringify(t.contents,i));if(t.directives?.docEnd)if(t.comment){const n=s(t.comment);n.includes("\n")?(e.push("..."),e.push(indentComment(n,""))):e.push(`... ${n}`)}else e.push("...");else{let n=t.comment;n&&m&&(n=n.replace(/^\n+/,"")),n&&(m&&!c||""===e[e.length-1]||e.push(""),e.push(indentComment(s(n),"")))}return e.join("\n")+"\n"}export{stringifyDocument};