import{isNode}from"../nodes/identity.js";import{visit}from"../visit.js";const escapeChars={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"},escapeTagName=t=>t.replace(/[!,[\]{}]/g,t=>escapeChars[t]);class Directives{constructor(t,e){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},Directives.defaultYaml,t),this.tags=Object.assign({},Directives.defaultTags,e)}clone(){const t=new Directives(this.yaml,this.tags);return t.docStart=this.docStart,t}atDocument(){const t=new Directives(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:Directives.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},Directives.defaultTags)}return t}add(t,e){this.atNextDocument&&(this.yaml={explicit:Directives.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},Directives.defaultTags),this.atNextDocument=!1);const s=t.trim().split(/[ \t]+/),i=s.shift();switch(i){case"%TAG":{if(2!==s.length&&(e(0,"%TAG directive should contain exactly two parts"),s.length<2))return!1;const[t,i]=s;return this.tags[t]=i,!0}case"%YAML":{if(this.yaml.explicit=!0,1!==s.length)return e(0,"%YAML directive should contain exactly one part"),!1;const[t]=s;return"1.1"===t||"1.2"===t?(this.yaml.version=t,!0):(e(6,`Unsupported YAML version ${t}`,/^\d+\.\d+$/.test(t)),!1)}default:return e(0,`Unknown directive ${i}`,!0),!1}}tagName(t,e){if("!"===t)return"!";if("!"!==t[0])return e(`Not a valid tag: ${t}`),null;if("<"===t[1]){const s=t.slice(2,-1);return"!"===s||"!!"===s?(e(`Verbatim tags aren't resolved, so ${t} is invalid.`),null):(">"!==t[t.length-1]&&e("Verbatim tags must end with a >"),s)}const[,s,i]=t.match(/^(.*!)([^!]*)$/s);i||e(`The ${t} tag has no suffix`);const a=this.tags[s];if(a)try{return a+decodeURIComponent(i)}catch(t){return e(String(t)),null}return"!"===s?t:(e(`Could not resolve tag: ${t}`),null)}tagString(t){for(const[e,s]of Object.entries(this.tags))if(t.startsWith(s))return e+escapeTagName(t.substring(s.length));return"!"===t[0]?t:`!<${t}>`}toString(t){const e=this.yaml.explicit?[`%YAML ${this.yaml.version||"1.2"}`]:[],s=Object.entries(this.tags);let i;if(t&&s.length>0&&isNode(t.contents)){const e={};visit(t.contents,(t,s)=>{isNode(s)&&s.tag&&(e[s.tag]=!0)}),i=Object.keys(e)}else i=[];for(const[a,n]of s)"!!"===a&&"tag:yaml.org,2002:"===n||t&&!i.some(t=>t.startsWith(n))||e.push(`%TAG ${a} ${n}`);return e.join("\n")}}Directives.defaultYaml={explicit:!1,version:"1.2"},Directives.defaultTags={"!!":"tag:yaml.org,2002:"};export{Directives};