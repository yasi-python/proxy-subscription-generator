import{isScalar,isCollection}from"../nodes/identity.js";import{visit}from"../visit.js";function anchorIsValid(o){if(/[\x00-\x19\s,[\]{}]/.test(o)){const n=JSON.stringify(o);throw new Error(`Anchor must not contain whitespace or control characters: ${n}`)}return!0}function anchorNames(o){const n=new Set;return visit(o,{Value(o,r){r.anchor&&n.add(r.anchor)}}),n}function findNewAnchor(o,n){for(let r=1;;++r){const t=`${o}${r}`;if(!n.has(t))return t}}function createNodeAnchors(o,n){const r=[],t=new Map;let e=null;return{onAnchor:t=>{r.push(t),e??(e=anchorNames(o));const c=findNewAnchor(n,e);return e.add(c),c},setAnchors:()=>{for(const o of r){const n=t.get(o);if("object"!=typeof n||!n.anchor||!isScalar(n.node)&&!isCollection(n.node)){const n=new Error("Failed to resolve repeated object (this should not happen)");throw n.source=o,n}n.node.anchor=n.anchor}},sourceObjects:t}}export{anchorIsValid,anchorNames,createNodeAnchors,findNewAnchor};