import{Alias}from"../nodes/Alias.js";import{isNode,isPair,MAP,SEQ,isDocument}from"../nodes/identity.js";import{Scalar}from"../nodes/Scalar.js";const defaultTagPrefix="tag:yaml.org,2002:";function findTagObject(e,t,n){if(t){const e=n.filter(e=>e.tag===t),o=e.find(e=>!e.format)??e[0];if(!o)throw new Error(`Tag ${t} not found`);return o}return n.find(t=>t.identify?.(e)&&!t.format)}function createNode(e,t,n){if(isDocument(e)&&(e=e.contents),isNode(e))return e;if(isPair(e)){const t=n.schema[MAP].createNode?.(n.schema,null,n);return t.items.push(e),t}(e instanceof String||e instanceof Number||e instanceof Boolean||"undefined"!=typeof BigInt&&e instanceof BigInt)&&(e=e.valueOf());const{aliasDuplicateObjects:o,onAnchor:a,onTagObj:r,schema:i,sourceObjects:c}=n;let s;if(o&&e&&"object"==typeof e){if(s=c.get(e),s)return s.anchor??(s.anchor=a(e)),new Alias(s.anchor);s={anchor:null,node:null},c.set(e,s)}t?.startsWith("!!")&&(t=defaultTagPrefix+t.slice(2));let f=findTagObject(e,t,i.tags);if(!f){if(e&&"function"==typeof e.toJSON&&(e=e.toJSON()),!e||"object"!=typeof e){const t=new Scalar(e);return s&&(s.node=t),t}f=e instanceof Map?i[MAP]:Symbol.iterator in Object(e)?i[SEQ]:i[MAP]}r&&(r(f),delete n.onTagObj);const l=f?.createNode?f.createNode(n.schema,e,n):"function"==typeof f?.nodeClass?.from?f.nodeClass.from(n.schema,e,n):new Scalar(e);return t?l.tag=t:f.default||(l.tag=f.tag),s&&(s.node=l),l}export{createNode};