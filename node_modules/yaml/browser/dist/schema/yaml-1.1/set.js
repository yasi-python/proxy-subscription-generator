import{isMap,isPair,isScalar}from"../../nodes/identity.js";import{Pair,createPair}from"../../nodes/Pair.js";import{YAMLMap,findPair}from"../../nodes/YAMLMap.js";class YAMLSet extends YAMLMap{constructor(e){super(e),this.tag=YAMLSet.tag}add(e){let t;t=isPair(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new Pair(e.key,null):new Pair(e,null),findPair(this.items,t.key)||this.items.push(t)}get(e,t){const i=findPair(this.items,e);return!t&&isPair(i)?isScalar(i.key)?i.key.value:i.key:i}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);const i=findPair(this.items,e);i&&!t?this.items.splice(this.items.indexOf(i),1):!i&&t&&this.items.push(new Pair(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,i){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,i);throw new Error("Set items must all have null values")}static from(e,t,i){const{replacer:s}=i,a=new this(e);if(t&&Symbol.iterator in Object(t))for(let e of t)"function"==typeof s&&(e=s.call(t,e,e)),a.items.push(createPair(e,null,i));return a}}YAMLSet.tag="tag:yaml.org,2002:set";const set={collection:"map",identify:e=>e instanceof Set,nodeClass:YAMLSet,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,i)=>YAMLSet.from(e,t,i),resolve(e,t){if(isMap(e)){if(e.hasAllNullValues(!0))return Object.assign(new YAMLSet,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};export{YAMLSet,set};