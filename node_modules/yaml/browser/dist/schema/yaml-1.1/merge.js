import{isScalar,isAlias,isSeq,isMap}from"../../nodes/identity.js";import{Scalar}from"../../nodes/Scalar.js";const MERGE_KEY="<<",merge={identify:e=>"<<"===e||"symbol"==typeof e&&"<<"===e.description,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new Scalar(Symbol("<<")),{addToJSMap:addMergeToJSMap}),stringify:()=>"<<"},isMergeKey=(e,a)=>(merge.identify(a)||isScalar(a)&&(!a.type||a.type===Scalar.PLAIN)&&merge.identify(a.value))&&e?.doc.schema.tags.some(e=>e.tag===merge.tag&&e.default);function addMergeToJSMap(e,a,r){if(r=e&&isAlias(r)?r.resolve(e.doc):r,isSeq(r))for(const s of r.items)mergeValue(e,a,s);else if(Array.isArray(r))for(const s of r)mergeValue(e,a,s);else mergeValue(e,a,r)}function mergeValue(e,a,r){const s=e&&isAlias(r)?r.resolve(e.doc):r;if(!isMap(s))throw new Error("Merge sources must be maps or map aliases");const o=s.toJSON(null,e,Map);for(const[e,r]of o)a instanceof Map?a.has(e)||a.set(e,r):a instanceof Set?a.add(e):Object.prototype.hasOwnProperty.call(a,e)||Object.defineProperty(a,e,{value:r,writable:!0,enumerable:!0,configurable:!0});return a}export{addMergeToJSMap,isMergeKey,merge};