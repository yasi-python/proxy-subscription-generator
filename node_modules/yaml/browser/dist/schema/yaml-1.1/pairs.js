import{isSeq,isPair,isMap}from"../../nodes/identity.js";import{createPair,Pair}from"../../nodes/Pair.js";import{Scalar}from"../../nodes/Scalar.js";import{YAMLSeq}from"../../nodes/YAMLSeq.js";function resolvePairs(e,t){if(isSeq(e))for(let r=0;r<e.items.length;++r){let o=e.items[r];if(!isPair(o)){if(isMap(o)){o.items.length>1&&t("Each pair must have its own sequence indicator");const e=o.items[0]||new Pair(new Scalar(null));if(o.commentBefore&&(e.key.commentBefore=e.key.commentBefore?`${o.commentBefore}\n${e.key.commentBefore}`:o.commentBefore),o.comment){const t=e.value??e.key;t.comment=t.comment?`${o.comment}\n${t.comment}`:o.comment}o=e}e.items[r]=isPair(o)?o:new Pair(o)}}else t("Expected a sequence for this tag");return e}function createPairs(e,t,r){const{replacer:o}=r,i=new YAMLSeq(e);i.tag="tag:yaml.org,2002:pairs";let n=0;if(t&&Symbol.iterator in Object(t))for(let e of t){let a,s;if("function"==typeof o&&(e=o.call(t,String(n++),e)),Array.isArray(e)){if(2!==e.length)throw new TypeError(`Expected [key, value] tuple: ${e}`);a=e[0],s=e[1]}else if(e&&e instanceof Object){const t=Object.keys(e);if(1!==t.length)throw new TypeError(`Expected tuple with one key, not ${t.length} keys`);a=t[0],s=e[a]}else a=e;i.items.push(createPair(a,s,r))}return i}const pairs={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:resolvePairs,createNode:createPairs};export{createPairs,pairs,resolvePairs};