import{isScalar,isPair}from"../../nodes/identity.js";import{toJS}from"../../nodes/toJS.js";import{YAMLMap}from"../../nodes/YAMLMap.js";import{YAMLSeq}from"../../nodes/YAMLSeq.js";import{resolvePairs,createPairs}from"./pairs.js";class YAMLOMap extends YAMLSeq{constructor(){super(),this.add=YAMLMap.prototype.add.bind(this),this.delete=YAMLMap.prototype.delete.bind(this),this.get=YAMLMap.prototype.get.bind(this),this.has=YAMLMap.prototype.has.bind(this),this.set=YAMLMap.prototype.set.bind(this),this.tag=YAMLOMap.tag}toJSON(t,e){if(!e)return super.toJSON(t);const s=new Map;e?.onCreate&&e.onCreate(s);for(const t of this.items){let o,a;if(isPair(t)?(o=toJS(t.key,"",e),a=toJS(t.value,o,e)):o=toJS(t,"",e),s.has(o))throw new Error("Ordered maps must not include duplicate keys");s.set(o,a)}return s}static from(t,e,s){const o=createPairs(t,e,s),a=new this;return a.items=o.items,a}}YAMLOMap.tag="tag:yaml.org,2002:omap";const omap={collection:"seq",identify:t=>t instanceof Map,nodeClass:YAMLOMap,default:!1,tag:"tag:yaml.org,2002:omap",resolve(t,e){const s=resolvePairs(t,e),o=[];for(const{key:t}of s.items)isScalar(t)&&(o.includes(t.value)?e(`Ordered maps must not include duplicate keys: ${t.value}`):o.push(t.value));return Object.assign(new YAMLOMap,s)},createNode:(t,e,s)=>YAMLOMap.from(t,e,s)};export{YAMLOMap,omap};