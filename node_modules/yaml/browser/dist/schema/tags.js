import{map}from"./common/map.js";import{nullTag}from"./common/null.js";import{seq}from"./common/seq.js";import{string}from"./common/string.js";import{boolTag}from"./core/bool.js";import{floatNaN,floatExp,float}from"./core/float.js";import{intOct,intHex,int}from"./core/int.js";import{schema}from"./core/schema.js";import{schema as schema$1}from"./json/schema.js";import{binary}from"./yaml-1.1/binary.js";import{merge}from"./yaml-1.1/merge.js";import{omap}from"./yaml-1.1/omap.js";import{pairs}from"./yaml-1.1/pairs.js";import{schema as schema$2}from"./yaml-1.1/schema.js";import{set}from"./yaml-1.1/set.js";import{timestamp,intTime,floatTime}from"./yaml-1.1/timestamp.js";const schemas=new Map([["core",schema],["failsafe",[map,seq,string]],["json",schema$1],["yaml11",schema$2],["yaml-1.1",schema$2]]),tagsByName={binary:binary,bool:boolTag,float:float,floatExp:floatExp,floatNaN:floatNaN,floatTime:floatTime,int:int,intHex:intHex,intOct:intOct,intTime:intTime,map:map,merge:merge,null:nullTag,omap:omap,pairs:pairs,seq:seq,set:set,timestamp:timestamp},coreKnownTags={"tag:yaml.org,2002:binary":binary,"tag:yaml.org,2002:merge":merge,"tag:yaml.org,2002:omap":omap,"tag:yaml.org,2002:pairs":pairs,"tag:yaml.org,2002:set":set,"tag:yaml.org,2002:timestamp":timestamp};function getTags(m,a,o){const t=schemas.get(a);if(t&&!m)return o&&!t.includes(merge)?t.concat(merge):t.slice();let r=t;if(!r){if(!Array.isArray(m)){const m=Array.from(schemas.keys()).filter(m=>"yaml11"!==m).map(m=>JSON.stringify(m)).join(", ");throw new Error(`Unknown schema "${a}"; use one of ${m} or define customTags array`)}r=[]}if(Array.isArray(m))for(const a of m)r=r.concat(a);else"function"==typeof m&&(r=m(r.slice()));return o&&(r=r.concat(merge)),r.reduce((m,a)=>{const o="string"==typeof a?tagsByName[a]:a;if(!o){const m=JSON.stringify(a),o=Object.keys(tagsByName).map(m=>JSON.stringify(m)).join(", ");throw new Error(`Unknown custom tag ${m}; use one of ${o}`)}return m.includes(o)||m.push(o),m},[])}export{coreKnownTags,getTags};