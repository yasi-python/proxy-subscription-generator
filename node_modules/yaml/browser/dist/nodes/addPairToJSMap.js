import{warn}from"../log.js";import{isMergeKey,addMergeToJSMap}from"../schema/yaml-1.1/merge.js";import{createStringifyContext}from"../stringify/stringify.js";import{isNode}from"./identity.js";import{toJS}from"./toJS.js";function addPairToJSMap(e,t,{key:i,value:o}){if(isNode(i)&&i.addToJSMap)i.addToJSMap(e,t,o);else if(isMergeKey(e,i))addMergeToJSMap(e,t,o);else{const r=toJS(i,"",e);if(t instanceof Map)t.set(r,toJS(o,r,e));else if(t instanceof Set)t.add(r);else{const n=stringifyKey(i,r,e),s=toJS(o,n,e);n in t?Object.defineProperty(t,n,{value:s,writable:!0,enumerable:!0,configurable:!0}):t[n]=s}}return t}function stringifyKey(e,t,i){if(null===t)return"";if("object"!=typeof t)return String(t);if(isNode(e)&&i?.doc){const t=createStringifyContext(i.doc,{});t.anchors=new Set;for(const e of i.anchors.keys())t.anchors.add(e.anchor);t.inFlow=!0,t.inStringifyKey=!0;const o=e.toString(t);if(!i.mapKeyWarned){let e=JSON.stringify(o);e.length>40&&(e=e.substring(0,36)+'..."'),warn(i.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),i.mapKeyWarned=!0}return o}return JSON.stringify(t)}export{addPairToJSMap};