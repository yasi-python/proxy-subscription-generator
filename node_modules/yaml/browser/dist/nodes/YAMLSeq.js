import{createNode}from"../doc/createNode.js";import{stringifyCollection}from"../stringify/stringifyCollection.js";import{Collection}from"./Collection.js";import{SEQ,isScalar}from"./identity.js";import{isScalarValue}from"./Scalar.js";import{toJS}from"./toJS.js";class YAMLSeq extends Collection{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(t){super(SEQ,t),this.items=[]}add(t){this.items.push(t)}delete(t){const e=asItemIndex(t);if("number"!=typeof e)return!1;return this.items.splice(e,1).length>0}get(t,e){const r=asItemIndex(t);if("number"!=typeof r)return;const o=this.items[r];return!e&&isScalar(o)?o.value:o}has(t){const e=asItemIndex(t);return"number"==typeof e&&e<this.items.length}set(t,e){const r=asItemIndex(t);if("number"!=typeof r)throw new Error(`Expected a valid index, not ${t}.`);const o=this.items[r];isScalar(o)&&isScalarValue(e)?o.value=e:this.items[r]=e}toJSON(t,e){const r=[];e?.onCreate&&e.onCreate(r);let o=0;for(const t of this.items)r.push(toJS(t,String(o++),e));return r}toString(t,e,r){return t?stringifyCollection(this,t,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(t.indent||"")+"  ",onChompKeep:r,onComment:e}):JSON.stringify(this)}static from(t,e,r){const{replacer:o}=r,i=new this(t);if(e&&Symbol.iterator in Object(e)){let t=0;for(let n of e){if("function"==typeof o){const r=e instanceof Set?n:String(t++);n=o.call(e,r,n)}i.items.push(createNode(n,void 0,r))}}return i}}function asItemIndex(t){let e=isScalar(t)?t.value:t;return e&&"string"==typeof e&&(e=Number(e)),"number"==typeof e&&Number.isInteger(e)&&e>=0?e:null}export{YAMLSeq};