import{createNode}from"../doc/createNode.js";import{isNode,isPair,isCollection,isScalar}from"./identity.js";import{NodeBase}from"./Node.js";function collectionFromPath(e,t,o){let i=o;for(let e=t.length-1;e>=0;--e){const o=t[e];if("number"==typeof o&&Number.isInteger(o)&&o>=0){const e=[];e[o]=i,i=e}else i=new Map([[o,i]])}return createNode(i,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}const isEmptyPath=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Collection extends NodeBase{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(e){const t=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return e&&(t.schema=e),t.items=t.items.map(t=>isNode(t)||isPair(t)?t.clone(e):t),this.range&&(t.range=this.range.slice()),t}addIn(e,t){if(isEmptyPath(e))this.add(t);else{const[o,...i]=e,s=this.get(o,!0);if(isCollection(s))s.addIn(i,t);else{if(void 0!==s||!this.schema)throw new Error(`Expected YAML collection at ${o}. Remaining path: ${i}`);this.set(o,collectionFromPath(this.schema,i,t))}}}deleteIn(e){const[t,...o]=e;if(0===o.length)return this.delete(t);const i=this.get(t,!0);if(isCollection(i))return i.deleteIn(o);throw new Error(`Expected YAML collection at ${t}. Remaining path: ${o}`)}getIn(e,t){const[o,...i]=e,s=this.get(o,!0);return 0===i.length?!t&&isScalar(s)?s.value:s:isCollection(s)?s.getIn(i,t):void 0}hasAllNullValues(e){return this.items.every(t=>{if(!isPair(t))return!1;const o=t.value;return null==o||e&&isScalar(o)&&null==o.value&&!o.commentBefore&&!o.comment&&!o.tag})}hasIn(e){const[t,...o]=e;if(0===o.length)return this.has(t);const i=this.get(t,!0);return!!isCollection(i)&&i.hasIn(o)}setIn(e,t){const[o,...i]=e;if(0===i.length)this.set(o,t);else{const e=this.get(o,!0);if(isCollection(e))e.setIn(i,t);else{if(void 0!==e||!this.schema)throw new Error(`Expected YAML collection at ${o}. Remaining path: ${i}`);this.set(o,collectionFromPath(this.schema,i,t))}}}}export{Collection,collectionFromPath,isEmptyPath};