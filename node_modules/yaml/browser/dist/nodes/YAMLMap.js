import{stringifyCollection}from"../stringify/stringifyCollection.js";import{addPairToJSMap}from"./addPairToJSMap.js";import{Collection}from"./Collection.js";import{MAP,isPair,isScalar}from"./identity.js";import{Pair,createPair}from"./Pair.js";import{isScalarValue}from"./Scalar.js";function findPair(e,i){const t=isScalar(i)?i.value:i;for(const s of e)if(isPair(s)){if(s.key===i||s.key===t)return s;if(isScalar(s.key)&&s.key.value===t)return s}}class YAMLMap extends Collection{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(MAP,e),this.items=[]}static from(e,i,t){const{keepUndefined:s,replacer:r}=t,a=new this(e),n=(e,n)=>{if("function"==typeof r)n=r.call(i,e,n);else if(Array.isArray(r)&&!r.includes(e))return;(void 0!==n||s)&&a.items.push(createPair(e,n,t))};if(i instanceof Map)for(const[e,t]of i)n(e,t);else if(i&&"object"==typeof i)for(const e of Object.keys(i))n(e,i[e]);return"function"==typeof e.sortMapEntries&&a.items.sort(e.sortMapEntries),a}add(e,i){let t;t=isPair(e)?e:e&&"object"==typeof e&&"key"in e?new Pair(e.key,e.value):new Pair(e,e?.value);const s=findPair(this.items,t.key),r=this.schema?.sortMapEntries;if(s){if(!i)throw new Error(`Key ${t.key} already set`);isScalar(s.value)&&isScalarValue(t.value)?s.value.value=t.value:s.value=t.value}else if(r){const e=this.items.findIndex(e=>r(t,e)<0);-1===e?this.items.push(t):this.items.splice(e,0,t)}else this.items.push(t)}delete(e){const i=findPair(this.items,e);if(!i)return!1;return this.items.splice(this.items.indexOf(i),1).length>0}get(e,i){const t=findPair(this.items,e),s=t?.value;return(!i&&isScalar(s)?s.value:s)??void 0}has(e){return!!findPair(this.items,e)}set(e,i){this.add(new Pair(e,i),!0)}toJSON(e,i,t){const s=t?new t:i?.mapAsMap?new Map:{};i?.onCreate&&i.onCreate(s);for(const e of this.items)addPairToJSMap(i,s,e);return s}toString(e,i,t){if(!e)return JSON.stringify(this);for(const e of this.items)if(!isPair(e))throw new Error(`Map items must all be pairs; found ${JSON.stringify(e)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),stringifyCollection(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:t,onComment:i})}}export{YAMLMap,findPair};