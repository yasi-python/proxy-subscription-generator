"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const fsScandir=require("@nodelib/fs.scandir"),common=require("./common"),reader_1=require("./reader");class SyncReader extends reader_1.default{constructor(){super(...arguments),this._scandir=fsScandir.scandirSync,this._storage=[],this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),this._storage}_pushToQueue(e,t){this._queue.add({directory:e,base:t})}_handleQueue(){for(const e of this._queue.values())this._handleDirectory(e.directory,e.base)}_handleDirectory(e,t){try{const s=this._scandir(e,this._settings.fsScandirSettings);for(const e of s)this._handleEntry(e,t)}catch(e){this._handleError(e)}}_handleError(e){if(common.isFatalError(this._settings,e))throw e}_handleEntry(e,t){const s=e.path;void 0!==t&&(e.path=common.joinPathSegments(t,e.name,this._settings.pathSegmentSeparator)),common.isAppliedFilter(this._settings.entryFilter,e)&&this._pushToStorage(e),e.dirent.isDirectory()&&common.isAppliedFilter(this._settings.deepFilter,e)&&this._pushToQueue(s,void 0===t?void 0:e.path)}_pushToStorage(e){this._storage.push(e)}}exports.default=SyncReader;