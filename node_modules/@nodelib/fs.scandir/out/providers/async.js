"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.readdir=exports.readdirWithFileTypes=exports.read=void 0;const fsStat=require("@nodelib/fs.stat"),rpl=require("run-parallel"),constants_1=require("../constants"),utils=require("../utils"),common=require("./common");function read(e,t,r){t.stats||!constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES?readdir(e,t,r):readdirWithFileTypes(e,t,r)}function readdirWithFileTypes(e,t,r){t.fs.readdir(e,{withFileTypes:!0},(a,l)=>{if(null!==a)return void callFailureCallback(r,a);const i=l.map(r=>({dirent:r,name:r.name,path:common.joinPathSegments(e,r.name,t.pathSegmentSeparator)}));if(!t.followSymbolicLinks)return void callSuccessCallback(r,i);const n=i.map(e=>makeRplTaskEntry(e,t));rpl(n,(e,t)=>{null===e?callSuccessCallback(r,t):callFailureCallback(r,e)})})}function makeRplTaskEntry(e,t){return r=>{e.dirent.isSymbolicLink()?t.fs.stat(e.path,(a,l)=>{if(null!==a)return t.throwErrorOnBrokenSymbolicLink?void r(a):void r(null,e);e.dirent=utils.fs.createDirentFromStats(e.name,l),r(null,e)}):r(null,e)}}function readdir(e,t,r){t.fs.readdir(e,(a,l)=>{if(null!==a)return void callFailureCallback(r,a);const i=l.map(r=>{const a=common.joinPathSegments(e,r,t.pathSegmentSeparator);return e=>{fsStat.stat(a,t.fsStatSettings,(l,i)=>{if(null!==l)return void e(l);const n={name:r,path:a,dirent:utils.fs.createDirentFromStats(r,i)};t.stats&&(n.stats=i),e(null,n)})}});rpl(i,(e,t)=>{null===e?callSuccessCallback(r,t):callFailureCallback(r,e)})})}function callFailureCallback(e,t){e(t)}function callSuccessCallback(e,t){e(null,t)}exports.read=read,exports.readdirWithFileTypes=readdirWithFileTypes,exports.readdir=readdir;