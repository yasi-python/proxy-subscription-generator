"use strict";const stringify=require("./stringify"),{MAX_LENGTH:MAX_LENGTH,CHAR_BACKSLASH:CHAR_BACKSLASH,CHAR_BACKTICK:CHAR_BACKTICK,CHAR_COMMA:CHAR_COMMA,CHAR_DOT:CHAR_DOT,CHAR_LEFT_PARENTHESES:CHAR_LEFT_PARENTHESES,CHAR_RIGHT_PARENTHESES:CHAR_RIGHT_PARENTHESES,CHAR_LEFT_CURLY_BRACE:CHAR_LEFT_CURLY_BRACE,CHAR_RIGHT_CURLY_BRACE:CHAR_RIGHT_CURLY_BRACE,CHAR_LEFT_SQUARE_BRACKET:CHAR_LEFT_SQUARE_BRACKET,CHAR_RIGHT_SQUARE_BRACKET:CHAR_RIGHT_SQUARE_BRACKET,CHAR_DOUBLE_QUOTE:CHAR_DOUBLE_QUOTE,CHAR_SINGLE_QUOTE:CHAR_SINGLE_QUOTE,CHAR_NO_BREAK_SPACE:CHAR_NO_BREAK_SPACE,CHAR_ZERO_WIDTH_NOBREAK_SPACE:CHAR_ZERO_WIDTH_NOBREAK_SPACE}=require("./constants"),parse=(e,t={})=>{if("string"!=typeof e)throw new TypeError("Expected a string");const A=t||{},_="number"==typeof A.maxLength?Math.min(MAX_LENGTH,A.maxLength):MAX_LENGTH;if(e.length>_)throw new SyntaxError(`Input length (${e.length}), exceeds max characters (${_})`);const n={type:"root",input:e,nodes:[]},R=[n];let C=n,E=n,o=0;const s=e.length;let H,p=0,i=0;const l=()=>e[p++],a=e=>{if("text"===e.type&&"dot"===E.type&&(E.type="text"),!E||"text"!==E.type||"text"!==e.type)return C.nodes.push(e),e.parent=C,e.prev=E,E=e,e;E.value+=e.value};for(a({type:"bos"});p<s;)if(C=R[R.length-1],H=l(),H!==CHAR_ZERO_WIDTH_NOBREAK_SPACE&&H!==CHAR_NO_BREAK_SPACE)if(H!==CHAR_BACKSLASH)if(H!==CHAR_RIGHT_SQUARE_BRACKET){if(H===CHAR_LEFT_SQUARE_BRACKET){let e;for(o++;p<s&&(e=l());)if(H+=e,e!==CHAR_LEFT_SQUARE_BRACKET)if(e!==CHAR_BACKSLASH){if(e===CHAR_RIGHT_SQUARE_BRACKET&&(o--,0===o))break}else H+=l();else o++;a({type:"text",value:H});continue}if(H!==CHAR_LEFT_PARENTHESES)if(H!==CHAR_RIGHT_PARENTHESES){if(H===CHAR_DOUBLE_QUOTE||H===CHAR_SINGLE_QUOTE||H===CHAR_BACKTICK){const e=H;let A;for(!0!==t.keepQuotes&&(H="");p<s&&(A=l());)if(A!==CHAR_BACKSLASH){if(A===e){!0===t.keepQuotes&&(H+=A);break}H+=A}else H+=A+l();a({type:"text",value:H});continue}if(H===CHAR_LEFT_CURLY_BRACE){i++;const e=E.value&&"$"===E.value.slice(-1)||!0===C.dollar;C=a({type:"brace",open:!0,close:!1,dollar:e,depth:i,commas:0,ranges:0,nodes:[]}),R.push(C),a({type:"open",value:H});continue}if(H===CHAR_RIGHT_CURLY_BRACE){if("brace"!==C.type){a({type:"text",value:H});continue}const e="close";C=R.pop(),C.close=!0,a({type:e,value:H}),i--,C=R[R.length-1];continue}if(H===CHAR_COMMA&&i>0){if(C.ranges>0){C.ranges=0;const e=C.nodes.shift();C.nodes=[e,{type:"text",value:stringify(C)}]}a({type:"comma",value:H}),C.commas++}else{if(H===CHAR_DOT&&i>0&&0===C.commas){const e=C.nodes;if(0===i||0===e.length){a({type:"text",value:H});continue}if("dot"===E.type){if(C.range=[],E.value+=H,E.type="range",3!==C.nodes.length&&5!==C.nodes.length){C.invalid=!0,C.ranges=0,E.type="text";continue}C.ranges++,C.args=[];continue}if("range"===E.type){e.pop();const t=e[e.length-1];t.value+=E.value+H,E=t,C.ranges--;continue}a({type:"dot",value:H});continue}a({type:"text",value:H})}}else{if("paren"!==C.type){a({type:"text",value:H});continue}C=R.pop(),a({type:"text",value:H}),C=R[R.length-1]}else C=a({type:"paren",nodes:[]}),R.push(C),a({type:"text",value:H})}else a({type:"text",value:"\\"+H});else a({type:"text",value:(t.keepEscaping?H:"")+l()});do{if(C=R.pop(),"root"!==C.type){C.nodes.forEach(e=>{e.nodes||("open"===e.type&&(e.isOpen=!0),"close"===e.type&&(e.isClose=!0),e.nodes||(e.type="text"),e.invalid=!0)});const e=R[R.length-1],t=e.nodes.indexOf(C);e.nodes.splice(t,1,...C.nodes)}}while(R.length>0);return a({type:"eos"}),n};module.exports=parse;