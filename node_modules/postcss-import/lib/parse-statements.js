"use strict";const valueParser=require("postcss-value-parser"),{stringify:stringify}=valueParser;function split(e,t){const r=[],n=e.reduce((e,n,a)=>a<t?"":"div"===n.type&&","===n.value?(r.push(e),""):e+stringify(n),"");return r.push(n),r}function parseMedia(e,t){return{type:"media",node:t,media:split(valueParser(t.params).nodes,0),layer:[]}}function parseCharset(e,t){return t.prev()?e.warn("@charset must precede all other statements",{node:t}):{type:"charset",node:t,media:[],layer:[]}}function parseImport(e,t){let r=t.prev();if(r)do{if("comment"!==r.type&&("atrule"!==r.type||"import"!==r.name&&"charset"!==r.name&&("layer"!==r.name||r.nodes)))return e.warn("@import must precede all other statements (besides @charset or empty @layer)",{node:t});r=r.prev()}while(r);if(t.nodes)return e.warn("It looks like you didn't end your @import statement correctly. Child nodes are attached to it.",{node:t});const n=valueParser(t.params).nodes,a={type:"import",node:t,media:[],layer:[]};if(!n.length||!("string"===n[0].type&&n[0].value||"function"===n[0].type&&"url"===n[0].value&&n[0].nodes.length&&n[0].nodes[0].value))return e.warn(`Unable to find uri in '${t.toString()}'`,{node:t});"string"===n[0].type?a.uri=n[0].value:a.uri=n[0].nodes[0].value,a.fullUri=stringify(n[0]);let s=n;if(s.length>2&&("word"===s[2].type||"function"===s[2].type)&&"layer"===s[2].value){if("space"!==s[1].type)return e.warn("Invalid import layer statement",{node:t});s[2].nodes?a.layer=[stringify(s[2].nodes)]:a.layer=[""],s=s.slice(2)}if(s.length>2){if("space"!==s[1].type)return e.warn("Invalid import media statement",{node:t});a.media=split(s,2)}return a}module.exports=function(e,t){const r=[];let n=[];return t.each(t=>{let a;"atrule"===t.type&&("import"===t.name?a=parseImport(e,t):"media"===t.name?a=parseMedia(e,t):"charset"===t.name&&(a=parseCharset(e,t))),a?(n.length&&(r.push({type:"nodes",nodes:n,media:[],layer:[]}),n=[]),r.push(a)):n.push(t)}),n.length&&r.push({type:"nodes",nodes:n,media:[],layer:[]}),r};