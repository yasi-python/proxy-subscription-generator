"use strict";const Stream=require("stream"),PassThrough=Stream.PassThrough,slice=Array.prototype.slice;function merge2(){const e=[],r=slice.call(arguments);let t=!1,n=r[r.length-1];n&&!Array.isArray(n)&&null==n.pipe?r.pop():n={};const i=!1!==n.end,o=!0===n.pipeError;null==n.objectMode&&(n.objectMode=!0),null==n.highWaterMark&&(n.highWaterMark=65536);const a=PassThrough(n);function s(){for(let r=0,t=arguments.length;r<t;r++)e.push(pauseStreams(arguments[r],n));return u(),this}function u(){if(t)return;t=!0;let r=e.shift();if(!r)return void process.nextTick(p);Array.isArray(r)||(r=[r]);let n=r.length+1;function i(){--n>0||(t=!1,u())}function s(e){function r(){e.removeListener("merge2UnpipeEnd",r),e.removeListener("end",r),o&&e.removeListener("error",t),i()}function t(e){a.emit("error",e)}if(e._readableState.endEmitted)return i();e.on("merge2UnpipeEnd",r),e.on("end",r),o&&e.on("error",t),e.pipe(a,{end:!1}),e.resume()}for(let e=0;e<r.length;e++)s(r[e]);i()}function p(){t=!1,a.emit("queueDrain"),i&&a.end()}return a.setMaxListeners(0),a.add=s,a.on("unpipe",function(e){e.emit("merge2UnpipeEnd")}),r.length&&s.apply(null,r),a}function pauseStreams(e,r){if(Array.isArray(e))for(let t=0,n=e.length;t<n;t++)e[t]=pauseStreams(e[t],r);else{if(!e._readableState&&e.pipe&&(e=e.pipe(PassThrough(r))),!e._readableState||!e.pause||!e.pipe)throw new Error("Only readable stream can be merged.");e.pause()}return e}module.exports=merge2;