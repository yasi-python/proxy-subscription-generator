/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
"use strict";const isNumber=require("is-number"),toRegexRange=(t,e,r)=>{if(!1===isNumber(t))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===e||t===e)return String(t);if(!1===isNumber(e))throw new TypeError("toRegexRange: expected the second argument to be a number.");let n={relaxZeros:!0,...r};"boolean"==typeof n.strictZeros&&(n.relaxZeros=!1===n.strictZeros);let a=t+":"+e+"="+String(n.relaxZeros)+String(n.shorthand)+String(n.capture)+String(n.wrap);if(toRegexRange.cache.hasOwnProperty(a))return toRegexRange.cache[a].result;let o=Math.min(t,e),s=Math.max(t,e);if(1===Math.abs(o-s)){let r=t+"|"+e;return n.capture?`(${r})`:!1===n.wrap?r:`(?:${r})`}let i=hasPadding(t)||hasPadding(e),u={min:t,max:e,a:o,b:s},c=[],l=[];if(i&&(u.isPadded=i,u.maxLen=String(u.max).length),o<0){l=splitToPatterns(s<0?Math.abs(s):1,Math.abs(o),u,n),o=u.a=0}return s>=0&&(c=splitToPatterns(o,s,u,n)),u.negatives=l,u.positives=c,u.result=collatePatterns(l,c,n),!0===n.capture?u.result=`(${u.result})`:!1!==n.wrap&&c.length+l.length>1&&(u.result=`(?:${u.result})`),toRegexRange.cache[a]=u,u.result};function collatePatterns(t,e,r){let n=filterPatterns(t,e,"-",!1,r)||[],a=filterPatterns(e,t,"",!1,r)||[],o=filterPatterns(t,e,"-?",!0,r)||[];return n.concat(o).concat(a).join("|")}function splitToRanges(t,e){let r=1,n=1,a=countNines(t,r),o=new Set([e]);for(;t<=a&&a<=e;)o.add(a),r+=1,a=countNines(t,r);for(a=countZeros(e+1,n)-1;t<a&&a<=e;)o.add(a),n+=1,a=countZeros(e+1,n)-1;return o=[...o],o.sort(compare),o}function rangeToPattern(t,e,r){if(t===e)return{pattern:t,count:[],digits:0};let n=zip(t,e),a=n.length,o="",s=0;for(let t=0;t<a;t++){let[e,a]=n[t];e===a?o+=e:"0"!==e||"9"!==a?o+=toCharacterClass(e,a,r):s++}return s&&(o+=!0===r.shorthand?"\\d":"[0-9]"),{pattern:o,count:[s],digits:a}}function splitToPatterns(t,e,r,n){let a,o=splitToRanges(t,e),s=[],i=t;for(let t=0;t<o.length;t++){let e=o[t],u=rangeToPattern(String(i),String(e),n),c="";r.isPadded||!a||a.pattern!==u.pattern?(r.isPadded&&(c=padZeros(e,r,n)),u.string=c+u.pattern+toQuantifier(u.count),s.push(u),i=e+1,a=u):(a.count.length>1&&a.count.pop(),a.count.push(u.count[0]),a.string=a.pattern+toQuantifier(a.count),i=e+1)}return s}function filterPatterns(t,e,r,n,a){let o=[];for(let a of t){let{string:t}=a;n||contains(e,"string",t)||o.push(r+t),n&&contains(e,"string",t)&&o.push(r+t)}return o}function zip(t,e){let r=[];for(let n=0;n<t.length;n++)r.push([t[n],e[n]]);return r}function compare(t,e){return t>e?1:e>t?-1:0}function contains(t,e,r){return t.some(t=>t[e]===r)}function countNines(t,e){return Number(String(t).slice(0,-e)+"9".repeat(e))}function countZeros(t,e){return t-t%Math.pow(10,e)}function toQuantifier(t){let[e=0,r=""]=t;return r||e>1?`{${e+(r?","+r:"")}}`:""}function toCharacterClass(t,e,r){return`[${t}${e-t===1?"":"-"}${e}]`}function hasPadding(t){return/^-?(0+)\d/.test(t)}function padZeros(t,e,r){if(!e.isPadded)return t;let n=Math.abs(e.maxLen-String(t).length),a=!1!==r.relaxZeros;switch(n){case 0:return"";case 1:return a?"0?":"0";case 2:return a?"0{0,2}":"00";default:return a?`0{0,${n}}`:`0{${n}}`}}toRegexRange.cache={},toRegexRange.clearCache=()=>toRegexRange.cache={},module.exports=toRegexRange;