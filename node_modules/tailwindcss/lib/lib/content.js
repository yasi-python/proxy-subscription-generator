"use strict";function _export(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}Object.defineProperty(exports,"__esModule",{value:!0}),_export(exports,{parseCandidateFiles:function(){return parseCandidateFiles},resolvedChangedContent:function(){return resolvedChangedContent},createBroadPatternCheck:function(){return createBroadPatternCheck}});const _fs=_interop_require_default(require("fs")),_path=_interop_require_default(require("path")),_isglob=_interop_require_default(require("is-glob")),_fastglob=_interop_require_default(require("fast-glob")),_normalizepath=_interop_require_default(require("normalize-path")),_parseGlob=require("../util/parseGlob"),_sharedState=require("./sharedState"),_log=_interop_require_default(require("../util/log")),_micromatch=_interop_require_default(require("micromatch"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}function parseCandidateFiles(e,t){let r=t.content.files;r=r.filter(e=>"string"==typeof e),r=r.map(_normalizepath.default);let n=_fastglob.default.generateTasks(r),a=[],o=[];for(const e of n)a.push(...e.positive.map(e=>parseFilePath(e,!1))),o.push(...e.negative.map(e=>parseFilePath(e,!0)));let i=[...a,...o];return i=resolveRelativePaths(e,i),i=i.flatMap(resolvePathSymlinks),i=i.map(resolveGlobPattern),i}function parseFilePath(e,t){let r={original:e,base:e,ignore:t,pattern:e,glob:null};return(0,_isglob.default)(e)&&Object.assign(r,(0,_parseGlob.parseGlob)(e)),r}function resolveGlobPattern(e){let t=(0,_normalizepath.default)(e.base);return t=_fastglob.default.escapePath(t),e.pattern=e.glob?`${t}/${e.glob}`:t,e.pattern=e.ignore?`!${e.pattern}`:e.pattern,e}function resolveRelativePaths(e,t){let r=[];return e.userConfigPath&&e.tailwindConfig.content.relative&&(r=[_path.default.dirname(e.userConfigPath)]),t.map(e=>(e.base=_path.default.resolve(...r,e.base),e))}function resolvePathSymlinks(e){let t=[e];try{let r=_fs.default.realpathSync(e.base);r!==e.base&&t.push({...e,base:r})}catch{}return t}function resolvedChangedContent(e,t,r){let n=e.tailwindConfig.content.files.filter(e=>"string"==typeof e.raw).map(({raw:e,extension:t="html"})=>({content:e,extension:t})),[a,o]=resolveChangedFiles(t,r);for(let e of a){let t=_path.default.extname(e).slice(1);n.push({file:e,extension:t})}return[n,o]}const LARGE_DIRECTORIES=["node_modules"],LARGE_DIRECTORIES_REGEX=new RegExp(`(${LARGE_DIRECTORIES.map(e=>String.raw`\b${e}\b`).join("|")})`);function createBroadPatternCheck(e){if(!e.some(e=>e.includes("**")&&!LARGE_DIRECTORIES_REGEX.test(e)))return()=>{};let t=[],r=[];for(let n of e){let e=_micromatch.default.matcher(n);LARGE_DIRECTORIES_REGEX.test(n)&&r.push(e),t.push(e)}let n=!1;return a=>{if(n)return;if(r.some(e=>e(a)))return;let o=t.findIndex(e=>e(a));if(-1===o)return;let i=e[o],l=_path.default.relative(process.cwd(),i);"."!==l[0]&&(l=`./${l}`);let s=LARGE_DIRECTORIES.find(e=>a.includes(e));s&&(n=!0,_log.default.warn("broad-content-glob-pattern",[`Your \`content\` configuration includes a pattern which looks like it's accidentally matching all of \`${s}\` and can cause serious performance issues.`,`Pattern: \`${l}\``,"See our documentation for recommendations:","https://tailwindcss.com/docs/content-configuration#pattern-recommendations"]))}}function resolveChangedFiles(e,t){let r=e.map(e=>e.pattern),n=new Map,a=createBroadPatternCheck(r),o=new Set;_sharedState.env.DEBUG&&console.time("Finding changed files");let i=_fastglob.default.sync(r,{absolute:!0});for(let e of i){a(e);let r=t.get(e)||-1/0,i=_fs.default.statSync(e).mtimeMs;i>r&&(o.add(e),n.set(e,i))}return _sharedState.env.DEBUG&&console.timeEnd("Finding changed files"),[o,n]}