"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"defaultExtractor",{enumerable:!0,get:function(){return defaultExtractor}});const _regex=_interop_require_wildcard(require("./regex")),_splitAtTopLevelOnly=require("../util/splitAtTopLevelOnly");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(_getRequireWildcardCache=function(e){return e?r:t})(e)}function _interop_require_wildcard(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var r=_getRequireWildcardCache(t);if(r&&r.has(e))return r.get(e);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var s in e)if("default"!==s&&Object.prototype.hasOwnProperty.call(e,s)){var a=i?Object.getOwnPropertyDescriptor(e,s):null;a&&(a.get||a.set)?Object.defineProperty(n,s,a):n[s]=e[s]}return n.default=e,r&&r.set(e,n),n}function defaultExtractor(e){let t=Array.from(buildRegExps(e));return e=>{let r=[];for(let i of t){var n;for(let t of null!==(n=e.match(i))&&void 0!==n?n:[])r.push(clipAtBalancedParens(t))}for(let e of r.slice()){let t=(0,_splitAtTopLevelOnly.splitAtTopLevelOnly)(e,".");for(let e=0;e<t.length;e++){let n=t[e];if(e>=t.length-1){r.push(n);continue}let i=Number(t[e+1]);isNaN(i)?r.push(n):e++}}return r}}function*buildRegExps(e){let t=e.tailwindConfig.separator,r=""!==e.tailwindConfig.prefix?_regex.optional(_regex.pattern([/-?/,_regex.escape(e.tailwindConfig.prefix)])):"",n=_regex.any([/\[[^\s:'"`]+:[^\s\[\]]+\]/,/\[[^\s:'"`\]]+:[^\s]+?\[[^\s]+\][^\s]+?\]/,_regex.pattern([_regex.any([/-?(?:\w+)/,/@(?:\w+)/]),_regex.optional(_regex.any([_regex.pattern([_regex.any([/-(?:\w+-)*\['[^\s]+'\]/,/-(?:\w+-)*\["[^\s]+"\]/,/-(?:\w+-)*\[`[^\s]+`\]/,/-(?:\w+-)*\[(?:[^\s\[\]]+\[[^\s\[\]]+\])*[^\s:\[\]]+\]/]),/(?![{([]])/,/(?:\/[^\s'"`\\><$]*)?/]),_regex.pattern([_regex.any([/-(?:\w+-)*\['[^\s]+'\]/,/-(?:\w+-)*\["[^\s]+"\]/,/-(?:\w+-)*\[`[^\s]+`\]/,/-(?:\w+-)*\[(?:[^\s\[\]]+\[[^\s\[\]]+\])*[^\s\[\]]+\]/]),/(?![{([]])/,/(?:\/[^\s'"`\\$]*)?/]),/[-\/][^\s'"`\\$={><]*/]))])]),i=[_regex.any([_regex.pattern([/@\[[^\s"'`]+\](\/[^\s"'`]+)?/,t]),_regex.pattern([/([^\s"'`\[\\]+-)?\[[^\s"'`]+\]\/[\w_-]+/,t]),_regex.pattern([/([^\s"'`\[\\]+-)?\[[^\s"'`]+\]/,t]),_regex.pattern([/[^\s"'`\[\\]+/,t])]),_regex.any([_regex.pattern([/([^\s"'`\[\\]+-)?\[[^\s`]+\]\/[\w_-]+/,t]),_regex.pattern([/([^\s"'`\[\\]+-)?\[[^\s`]+\]/,t]),_regex.pattern([/[^\s`\[\\]+/,t])])];for(const e of i)yield _regex.pattern(["((?=((",e,")+))\\2)?",/!?/,r,n]);yield/[^<>"'`\s.(){}[\]#=%$][^<>"'`\s(){}[\]#=%$]*[^<>"'`\s.(){}[\]#=%:$]/g}let SPECIALS=/([\[\]'"`])([^\[\]'"`])?/g,ALLOWED_CLASS_CHARACTERS=/[^"'`\s<>\]]+/;function clipAtBalancedParens(e){if(!e.includes("-["))return e;let t=0,r=[],n=e.matchAll(SPECIALS);n=Array.from(n).flatMap(e=>{const[,...t]=e;return t.map((t,r)=>Object.assign([],e,{index:e.index+r,0:t}))});for(let i of n){let n=i[0],s=r[r.length-1];if(n===s?r.pop():"'"!==n&&'"'!==n&&"`"!==n||r.push(n),!s)if("["!==n)if("]"!==n){if(t<0)return e.substring(0,i.index-1);if(0===t&&!ALLOWED_CLASS_CHARACTERS.test(n))return e.substring(0,i.index)}else t--;else t++}return e}