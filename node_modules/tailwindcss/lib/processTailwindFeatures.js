"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"default",{enumerable:!0,get:function(){return processTailwindFeatures}});const _normalizeTailwindDirectives=_interop_require_default(require("./lib/normalizeTailwindDirectives")),_expandTailwindAtRules=_interop_require_default(require("./lib/expandTailwindAtRules")),_expandApplyAtRules=_interop_require_default(require("./lib/expandApplyAtRules")),_evaluateTailwindFunctions=_interop_require_default(require("./lib/evaluateTailwindFunctions")),_substituteScreenAtRules=_interop_require_default(require("./lib/substituteScreenAtRules")),_resolveDefaultsAtRules=_interop_require_default(require("./lib/resolveDefaultsAtRules")),_collapseAdjacentRules=_interop_require_default(require("./lib/collapseAdjacentRules")),_collapseDuplicateDeclarations=_interop_require_default(require("./lib/collapseDuplicateDeclarations")),_partitionApplyAtRules=_interop_require_default(require("./lib/partitionApplyAtRules")),_setupContextUtils=require("./lib/setupContextUtils"),_featureFlags=require("./featureFlags");function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}function processTailwindFeatures(e){return async function(t,i){let{tailwindDirectives:l,applyDirectives:r}=(0,_normalizeTailwindDirectives.default)(t);(0,_partitionApplyAtRules.default)()(t,i);let a=e({tailwindDirectives:l,applyDirectives:r,registerDependency(e){i.messages.push({plugin:"tailwindcss",parent:i.opts.from,...e})},createContext:(e,i)=>(0,_setupContextUtils.createContext)(e,i,t)})(t,i);if("-"===a.tailwindConfig.separator)throw new Error("The '-' character cannot be used as a custom separator in JIT mode due to parsing ambiguity. Please use another character like '_' instead.");(0,_featureFlags.issueFlagNotices)(a.tailwindConfig),await(0,_expandTailwindAtRules.default)(a)(t,i),(0,_partitionApplyAtRules.default)()(t,i),(0,_expandApplyAtRules.default)(a)(t,i),(0,_evaluateTailwindFunctions.default)(a)(t,i),(0,_substituteScreenAtRules.default)(a)(t,i),(0,_resolveDefaultsAtRules.default)(a)(t,i),(0,_collapseAdjacentRules.default)(a)(t,i),(0,_collapseDuplicateDeclarations.default)(a)(t,i)}}