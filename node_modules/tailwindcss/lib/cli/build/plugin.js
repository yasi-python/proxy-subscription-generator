"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),Object.defineProperty(exports,"createProcessor",{enumerable:!0,get:function(){return createProcessor}});const _path=_interop_require_default(require("path")),_fs=_interop_require_default(require("fs")),_postcssloadconfig=_interop_require_default(require("postcss-load-config")),_lilconfig=require("lilconfig"),_plugins=_interop_require_default(require("postcss-load-config/src/plugins")),_options=_interop_require_default(require("postcss-load-config/src/options")),_processTailwindFeatures=_interop_require_default(require("../../processTailwindFeatures")),_deps=require("./deps"),_utils=require("./utils"),_sharedState=require("../../lib/sharedState"),_resolveConfig=_interop_require_default(require("../../../resolveConfig.js")),_content=require("../../lib/content.js"),_watching=require("./watching.js"),_fastglob=_interop_require_default(require("fast-glob")),_findAtConfigPath=require("../../lib/findAtConfigPath.js"),_log=_interop_require_default(require("../../util/log")),_loadconfig=require("../../lib/load-config"),_getModuleDependencies=_interop_require_default(require("../../lib/getModuleDependencies"));function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}async function loadPostCssPlugins(e){let t=e?await(async()=>{let t=_path.default.resolve(e),{config:n={}}=await(0,_lilconfig.lilconfig)("postcss").load(t);return n="function"==typeof n?n():Object.assign({},n),n.plugins||(n.plugins=[]),{file:t,plugins:(0,_plugins.default)(n,t),options:(0,_options.default)(n,t)}})():await(0,_postcssloadconfig.default)(),n=t.plugins,o=n.findIndex(e=>"function"==typeof e&&"tailwindcss"===e.name||"object"==typeof e&&null!==e&&"tailwindcss"===e.postcssPlugin);return[-1===o?[]:n.slice(0,o),-1===o?n:n.slice(o+1),t.options]}function loadBuiltinPostcssPlugins(){let e=(0,_deps.loadPostcss)(),t="__TAILWIND_RESTORE_IMPORT__: ";return[[n=>{n.walkAtRules("import",n=>{n.params.slice(1).startsWith("tailwindcss/")&&(n.after(e.comment({text:t+n.params})),n.remove())})},(0,_deps.loadPostcssImport)(),n=>{n.walkComments(n=>{n.text.startsWith(t)&&(n.after(e.atRule({name:"import",params:n.text.replace(t,"")})),n.remove())})}],[],{}]}let state={context:null,watcher:null,changedContent:[],configBag:null,contextDependencies:new Set,contentPaths:[],refreshContentPaths(){var e;this.contentPaths=(0,_content.parseCandidateFiles)(this.context,null===(e=this.context)||void 0===e?void 0:e.tailwindConfig)},get config(){return this.context.tailwindConfig},get contentPatterns(){return{all:this.contentPaths.map(e=>e.pattern),dynamic:this.contentPaths.filter(e=>void 0!==e.glob).map(e=>e.pattern)}},loadConfig(e,t){this.watcher&&e&&this.refreshConfigDependencies();let n=(0,_loadconfig.loadConfig)(e),o=(0,_getModuleDependencies.default)(e);return this.configBag={config:n,dependencies:o,dispose(){for(let e of o)delete require.cache[require.resolve(e)]}},this.configBag.config=(0,_resolveConfig.default)(this.configBag.config,{content:{files:[]}}),(null==t?void 0:t.length)>0&&(this.configBag.config.content.files=t),this.configBag.config},refreshConfigDependencies(){var e;_sharedState.env.DEBUG&&console.time("Module dependencies"),null===(e=this.configBag)||void 0===e||e.dispose(),_sharedState.env.DEBUG&&console.timeEnd("Module dependencies")},readContentPaths(){let e=[],t=_fastglob.default.sync(this.contentPatterns.all),n=(0,_content.createBroadPatternCheck)(this.contentPatterns.all);for(let o of t)n(o),e.push({content:_fs.default.readFileSync(_path.default.resolve(o),"utf8"),extension:_path.default.extname(o).slice(1)});let o=this.config.content.files.filter(e=>null!==e&&"object"==typeof e);for(let{raw:t,extension:n="html"}of o)e.push({content:t,extension:n});return e},getContext({createContext:e,cliConfigPath:t,root:n,result:o,content:s}){var i;_sharedState.env.DEBUG&&console.time("Searching for config");let r=null!==(i=(0,_findAtConfigPath.findAtConfigPath)(n,o))&&void 0!==i?i:t;if(_sharedState.env.DEBUG&&console.timeEnd("Searching for config"),this.context)return this.context.changedContent=this.changedContent.splice(0),this.context;_sharedState.env.DEBUG&&console.time("Loading config");let a=this.loadConfig(r,s);_sharedState.env.DEBUG&&console.timeEnd("Loading config"),_sharedState.env.DEBUG&&console.time("Creating context"),this.context=e(a,[]),Object.assign(this.context,{userConfigPath:r}),_sharedState.env.DEBUG&&console.timeEnd("Creating context"),_sharedState.env.DEBUG&&console.time("Resolving content paths"),this.refreshContentPaths(),_sharedState.env.DEBUG&&console.timeEnd("Resolving content paths"),this.watcher&&(_sharedState.env.DEBUG&&console.time("Watch new files"),this.watcher.refreshWatchedFiles(),_sharedState.env.DEBUG&&console.timeEnd("Watch new files"));for(let e of this.readContentPaths())this.context.changedContent.push(e);return this.context}};async function createProcessor(e,t){var n;let o=(0,_deps.loadPostcss)(),s=e["--input"],i=e["--output"],r=e["--postcss"],a="string"==typeof e["--postcss"]?e["--postcss"]:void 0,[l,c,d]=r?await loadPostCssPlugins(a):loadBuiltinPostcssPlugins();var u;e["--purge"]&&(_log.default.warn("purge-flag-deprecated",["The `--purge` flag has been deprecated.","Please use `--content` instead."]),e["--content"]||(e["--content"]=e["--purge"]));let f=null!==(u=null===(n=e["--content"])||void 0===n?void 0:n.split(/(?<!{[^}]+),/))&&void 0!==u?u:[],h=()=>({postcssPlugin:"tailwindcss",async Once(e,{result:n}){_sharedState.env.DEBUG&&console.time("Compiling CSS"),await(0,_processTailwindFeatures.default)(({createContext:o})=>(console.error(),console.error("Rebuilding..."),()=>state.getContext({createContext:o,cliConfigPath:t,root:e,result:n,content:f})))(e,n),_sharedState.env.DEBUG&&console.timeEnd("Compiling CSS")}});h.postcss=!0;let p=o([...l,h,!e["--minify"]&&_utils.formatNodes,...c,!e["--no-autoprefixer"]&&(0,_deps.loadAutoprefixer)(),e["--minify"]&&(0,_deps.loadCssNano)()].filter(Boolean));async function g(){let e=process.hrtime.bigint();return async function(){return"-"===s?(0,_utils.drainStdin)():s?_fs.default.promises.readFile(_path.default.resolve(s),"utf8"):"@tailwind base; @tailwind components; @tailwind utilities"}().then(e=>p.process(e,{...d,from:s,to:i})).then(e=>{if(!state.watcher)return e;_sharedState.env.DEBUG&&console.time("Recording PostCSS dependencies");for(let t of e.messages)"dependency"===t.type&&state.contextDependencies.add(t.file);return _sharedState.env.DEBUG&&console.timeEnd("Recording PostCSS dependencies"),_sharedState.env.DEBUG&&console.time("Watch new files"),state.watcher.refreshWatchedFiles(),_sharedState.env.DEBUG&&console.timeEnd("Watch new files"),e}).then(e=>{if(i)return Promise.all([(0,_utils.outputFile)(e.opts.to,e.css),e.map&&(0,_utils.outputFile)(e.opts.to+".map",e.map.toString())]);process.stdout.write(e.css)}).then(()=>{let t=process.hrtime.bigint();console.error(),console.error("Done in",(t-e)/BigInt(1e6)+"ms.")}).then(()=>{},e=>{if(!state.watcher)return Promise.reject(e);console.error(e)})}return void 0!==s&&"-"!==s&&state.contextDependencies.add(_path.default.resolve(s)),{build:g,watch:async()=>{state.watcher=(0,_watching.createWatcher)(e,{state:state,async rebuild(e){if(e.some(e=>{var t;return(null===(t=state.configBag)||void 0===t?void 0:t.dependencies.has(e.file))||state.contextDependencies.has(e.file)}))state.context=null;else for(let t of await async function(e){return Promise.all(e.map(async e=>({content:await e.content(),extension:e.extension})))}(e))state.changedContent.push(t);return g()}}),await g()}}}