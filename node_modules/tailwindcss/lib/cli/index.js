#!/usr/bin/env node
"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const _path=_interop_require_default(require("path")),_arg=_interop_require_default(require("arg")),_fs=_interop_require_default(require("fs")),_build=require("./build"),_help=require("./help"),_init=require("./init");function _interop_require_default(e){return e&&e.__esModule?e:{default:e}}function oneOf(...e){return Object.assign((t=!0)=>{for(let i of e){let e=i(t);if(e===t)return e}throw new Error("...")},{manualParsing:!0})}let commands={init:{run:_init.init,args:{"--esm":{type:Boolean,description:"Initialize configuration file as ESM"},"--ts":{type:Boolean,description:"Initialize configuration file as TypeScript"},"--postcss":{type:Boolean,description:"Initialize a `postcss.config.js` file"},"--full":{type:Boolean,description:"Include the default values for all options in the generated configuration file"},"-f":"--full","-p":"--postcss"}},build:{run:_build.build,args:{"--input":{type:String,description:"Input file"},"--output":{type:String,description:"Output file"},"--watch":{type:oneOf(String,Boolean),description:"Watch for changes and rebuild as needed"},"--poll":{type:Boolean,description:"Use polling instead of filesystem events when watching"},"--content":{type:String,description:"Content paths to use for removing unused classes"},"--purge":{type:String,deprecated:!0},"--postcss":{type:oneOf(String,Boolean),description:"Load custom PostCSS configuration"},"--minify":{type:Boolean,description:"Minify the output"},"--config":{type:String,description:"Path to a custom config file"},"--no-autoprefixer":{type:Boolean,description:"Disable autoprefixer"},"-c":"--config","-i":"--input","-o":"--output","-m":"--minify","-w":"--watch","-p":"--poll"}}},sharedFlags={"--help":{type:Boolean,description:"Display usage information"},"-h":"--help"};process.stdout.isTTY&&(void 0===process.argv[2]||process.argv.slice(2).every(e=>void 0!==sharedFlags[e]))&&((0,_help.help)({usage:["tailwindcss [--input input.css] [--output output.css] [--watch] [options...]","tailwindcss init [--full] [--postcss] [options...]"],commands:Object.keys(commands).filter(e=>"build"!==e).map(e=>`${e} [options]`),options:{...commands.build.args,...sharedFlags}}),process.exit(0));let command=((e="")=>e.startsWith("-")?void 0:e)(process.argv[2])||"build";void 0===commands[command]&&(_fs.default.existsSync(_path.default.resolve(command))?command="build":((0,_help.help)({message:`Invalid command: ${command}`,usage:["tailwindcss <command> [options]"],commands:Object.keys(commands).filter(e=>"build"!==e).map(e=>`${e} [options]`),options:sharedFlags}),process.exit(1)));let{args:flags,run:run}=commands[command],args=(()=>{try{let e=(0,_arg.default)(Object.fromEntries(Object.entries({...flags,...sharedFlags}).filter(([e,t])=>{var i;return!(null==t||null===(i=t.type)||void 0===i?void 0:i.manualParsing)}).map(([e,t])=>[e,"object"==typeof t?t.type:t])),{permissive:!0});for(let t=e._.length-1;t>=0;--t){let i=e._[t];if(!i.startsWith("-"))continue;let[s,o]=i.split("="),n=flags[s];for(;"string"==typeof n;)s=n,n=flags[n];if(!n)continue;let a=[],r=t+1;if(void 0===o){for(;e._[r]&&!e._[r].startsWith("-");)a.push(e._[r++]);e._.splice(t,1+a.length),o=0===a.length?void 0:1===a.length?a[0]:a}else e._.splice(t,1);e[s]=n.type(o,s)}return e._[0]!==command&&e._.unshift(command),e}catch(e){throw"ARG_UNKNOWN_OPTION"===e.code&&((0,_help.help)({message:e.message,usage:["tailwindcss <command> [options]"],options:sharedFlags}),process.exit(1)),e}})();args["--help"]&&((0,_help.help)({options:{...flags,...sharedFlags},usage:[`tailwindcss ${command} [options]`]}),process.exit(0)),run(args);