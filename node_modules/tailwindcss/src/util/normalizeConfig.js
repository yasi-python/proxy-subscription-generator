import{flagEnabled}from"../featureFlags";import log,{dim}from"./log";export function normalizeConfig(t){(()=>{if(t.purge)return!1;if(!t.content)return!1;if(!Array.isArray(t.content)&&("object"!=typeof t.content||null===t.content))return!1;if(Array.isArray(t.content))return t.content.every(t=>"string"==typeof t||"string"==typeof t?.raw&&(!t?.extension||"string"==typeof t?.extension));if("object"==typeof t.content&&null!==t.content){if(Object.keys(t.content).some(t=>!["files","relative","extract","transform"].includes(t)))return!1;if(Array.isArray(t.content.files)){if(!t.content.files.every(t=>"string"==typeof t||"string"==typeof t?.raw&&(!t?.extension||"string"==typeof t?.extension)))return!1;if("object"==typeof t.content.extract){for(let e of Object.values(t.content.extract))if("function"!=typeof e)return!1}else if(void 0!==t.content.extract&&"function"!=typeof t.content.extract)return!1;if("object"==typeof t.content.transform){for(let e of Object.values(t.content.transform))if("function"!=typeof e)return!1}else if(void 0!==t.content.transform&&"function"!=typeof t.content.transform)return!1;if("boolean"!=typeof t.content.relative&&void 0!==t.content.relative)return!1}return!0}return!1})()||log.warn("purge-deprecation",["The `purge`/`content` options have changed in Tailwind CSS v3.0.","Update your configuration file to eliminate this warning.","https://tailwindcss.com/docs/upgrade-guide#configure-content-sources"]),t.safelist=(()=>{let{content:e,purge:r,safelist:n}=t;return Array.isArray(n)?n:Array.isArray(e?.safelist)?e.safelist:Array.isArray(r?.safelist)?r.safelist:Array.isArray(r?.options?.safelist)?r.options.safelist:[]})(),t.blocklist=(()=>{let{blocklist:e}=t;if(Array.isArray(e)){if(e.every(t=>"string"==typeof t))return e;log.warn("blocklist-invalid",["The `blocklist` option must be an array of strings.","https://tailwindcss.com/docs/content-configuration#discarding-classes"])}return[]})(),"function"==typeof t.prefix?(log.warn("prefix-function",["As of Tailwind CSS v3.0, `prefix` cannot be a function.","Update `prefix` in your configuration to be a string to eliminate this warning.","https://tailwindcss.com/docs/upgrade-guide#prefix-cannot-be-a-function"]),t.prefix=""):t.prefix=t.prefix??"",t.content={relative:(()=>{let{content:e}=t;return e?.relative?e.relative:flagEnabled(t,"relativeContentPathsByDefault")})(),files:(()=>{let{content:e,purge:r}=t;return Array.isArray(r)?r:Array.isArray(r?.content)?r.content:Array.isArray(e)?e:Array.isArray(e?.content)?e.content:Array.isArray(e?.files)?e.files:[]})(),extract:(()=>{let e=t.purge?.extract?t.purge.extract:t.content?.extract?t.content.extract:t.purge?.extract?.DEFAULT?t.purge.extract.DEFAULT:t.content?.extract?.DEFAULT?t.content.extract.DEFAULT:t.purge?.options?.extractors?t.purge.options.extractors:t.content?.options?.extractors?t.content.options.extractors:{},r={},n=t.purge?.options?.defaultExtractor?t.purge.options.defaultExtractor:t.content?.options?.defaultExtractor?t.content.options.defaultExtractor:void 0;if(void 0!==n&&(r.DEFAULT=n),"function"==typeof e)r.DEFAULT=e;else if(Array.isArray(e))for(let{extensions:t,extractor:n}of e??[])for(let e of t)r[e]=n;else"object"==typeof e&&null!==e&&Object.assign(r,e);return r})(),transform:(()=>{let e=t.purge?.transform?t.purge.transform:t.content?.transform?t.content.transform:t.purge?.transform?.DEFAULT?t.purge.transform.DEFAULT:t.content?.transform?.DEFAULT?t.content.transform.DEFAULT:{},r={};return"function"==typeof e?r.DEFAULT=e:"object"==typeof e&&null!==e&&Object.assign(r,e),r})()};for(let e of t.content.files)if("string"==typeof e&&/{([^,]*?)}/g.test(e)){log.warn("invalid-glob-braces",[`The glob pattern ${dim(e)} in your Tailwind CSS configuration is invalid.`,`Update it to ${dim(e.replace(/{([^,]*?)}/g,"$1"))} to silence this warning.`]);break}return t}