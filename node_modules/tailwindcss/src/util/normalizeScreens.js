export function normalizeScreens(e,r=!0){return Array.isArray(e)?e.map(e=>{if(r&&Array.isArray(e))throw new Error("The tuple syntax is not supported for `screens`.");if("string"==typeof e)return{name:e.toString(),not:!1,values:[{min:e,max:void 0}]};let[a,n]=e;return a=a.toString(),"string"==typeof n?{name:a,not:!1,values:[{min:n,max:void 0}]}:Array.isArray(n)?{name:a,not:!1,values:n.map(e=>resolveValue(e))}:{name:a,not:!1,values:[resolveValue(n)]}}):normalizeScreens(Object.entries(e??{}),!1)}export function isScreenSortable(e){return 1!==e.values.length?{result:!1,reason:"multiple-values"}:void 0!==e.values[0].raw?{result:!1,reason:"raw-values"}:void 0!==e.values[0].min&&void 0!==e.values[0].max?{result:!1,reason:"min-and-max"}:{result:!0,reason:null}}export function compareScreens(e,r,a){let n=toScreen(r,e),t=toScreen(a,e),o=isScreenSortable(n),s=isScreenSortable(t);if("multiple-values"===o.reason||"multiple-values"===s.reason)throw new Error("Attempted to sort a screen with multiple values. This should never happen. Please open a bug report.");if("raw-values"===o.reason||"raw-values"===s.reason)throw new Error("Attempted to sort a screen with raw values. This should never happen. Please open a bug report.");if("min-and-max"===o.reason||"min-and-max"===s.reason)throw new Error("Attempted to sort a screen with both min and max values. This should never happen. Please open a bug report.");let{min:l,max:i}=n.values[0],{min:u,max:m}=t.values[0];r.not&&([l,i]=[i,l]),a.not&&([u,m]=[m,u]),l=void 0===l?l:parseFloat(l),i=void 0===i?i:parseFloat(i),u=void 0===u?u:parseFloat(u),m=void 0===m?m:parseFloat(m);let[p,v]="min"===e?[l,u]:[m,i];return p-v}export function toScreen(e,r){return"object"==typeof e?e:{name:"arbitrary-screen",values:[{[r]:e}]}}function resolveValue({"min-width":e,min:r=e,max:a,raw:n}={}){return{min:r,max:a,raw:n}}