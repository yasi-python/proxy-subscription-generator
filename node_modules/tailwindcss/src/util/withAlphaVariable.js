import{parseColor,formatColor}from"./color";export function withAlphaValue(o,r,a){if("function"==typeof o)return o({opacityValue:r});let t=parseColor(o,{loose:!0});return null===t?a:formatColor({...t,alpha:r})}export default function withAlphaVariable({color:o,property:r,variable:a}){let t=[].concat(r);if("function"==typeof o)return{[a]:"1",...Object.fromEntries(t.map(r=>[r,o({opacityVariable:a,opacityValue:`var(${a}, 1)`})]))};const e=parseColor(o);return null===e||void 0!==e.alpha?Object.fromEntries(t.map(r=>[r,o])):{[a]:"1",...Object.fromEntries(t.map(o=>[o,formatColor({...e,alpha:`var(${a}, 1)`})]))}}