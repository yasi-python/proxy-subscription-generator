import negateValue from"./negateValue";import corePluginList from"../corePluginList";import configurePlugins from"./configurePlugins";import colors from"../public/colors";import{defaults}from"./defaults";import{toPath}from"./toPath";import{normalizeConfig}from"./normalizeConfig";import isPlainObject from"./isPlainObject";import{cloneDeep}from"./cloneDeep";import{parseColorFormat}from"./pluginUtils";import{withAlphaValue}from"./withAlphaVariable";import toColorValue from"./toColorValue";function isFunction(e){return"function"==typeof e}function mergeWith(e,...t){let i=t.pop();for(let r of t)for(let t in r){let n=i(e[t],r[t]);void 0===n?isPlainObject(e[t])&&isPlainObject(r[t])?e[t]=mergeWith({},e[t],r[t],i):e[t]=r[t]:e[t]=n}return e}const configUtils={colors:colors,negative:e=>Object.keys(e).filter(t=>"0"!==e[t]).reduce((t,i)=>{let r=negateValue(e[i]);return void 0!==r&&(t[`-${i}`]=r),t},{}),breakpoints:e=>Object.keys(e).filter(t=>"string"==typeof e[t]).reduce((t,i)=>({...t,[`screen-${i}`]:e[i]}),{})};function value(e,...t){return isFunction(e)?e(...t):e}function collectExtends(e){return e.reduce((e,{extend:t})=>mergeWith(e,t,(e,t)=>void 0===e?[t]:Array.isArray(e)?[t,...e]:[t,e]),{})}function mergeThemes(e){return{...e.reduce((e,t)=>defaults(e,t),{}),extend:collectExtends(e)}}function mergeExtensionCustomizer(e,t){return Array.isArray(e)&&isPlainObject(e[0])?e.concat(t):Array.isArray(t)&&isPlainObject(t[0])&&isPlainObject(e)?[e,...t]:Array.isArray(t)?t:void 0}function mergeExtensions({extend:e,...t}){return mergeWith(t,e,(e,t)=>isFunction(e)||t.some(isFunction)?(i,r)=>mergeWith({},...[e,...t].map(e=>value(e,i,r)),mergeExtensionCustomizer):mergeWith({},e,...t,mergeExtensionCustomizer))}function*toPaths(e){let t=toPath(e);if(0===t.length)return;if(yield t,Array.isArray(e))return;let i=e.match(/^(.*?)\s*\/\s*([^/]+)$/);if(null!==i){let[,e,t]=i,r=toPath(e);r.alpha=t,yield r}}function resolveFunctionKeys(e){const t=(i,r)=>{for(const r of toPaths(i)){let i=0,n=e;for(;null!=n&&i<r.length;)n=n[r[i++]],n=isFunction(n)&&(void 0===r.alpha||i<=r.length-1)?n(t,configUtils):n;if(void 0!==n){if(void 0!==r.alpha){let e=parseColorFormat(n);return withAlphaValue(e,r.alpha,toColorValue(e))}return isPlainObject(n)?cloneDeep(n):n}}return r};return Object.assign(t,{theme:t,...configUtils}),Object.keys(e).reduce((i,r)=>(i[r]=isFunction(e[r])?e[r](t,configUtils):e[r],i),{})}function extractPluginConfigs(e){let t=[];return e.forEach(e=>{t=[...t,e];const i=e?.plugins??[];0!==i.length&&i.forEach(e=>{e.__isOptionsFunction&&(e=e()),t=[...t,...extractPluginConfigs([e?.config??{}])]})}),t}function resolveCorePlugins(e){return[...e].reduceRight((e,t)=>isFunction(t)?t({corePlugins:e}):configurePlugins(t,e),corePluginList)}function resolvePluginLists(e){return[...e].reduceRight((e,t)=>[...e,...t],[])}export default function resolveConfig(e){let t=[...extractPluginConfigs(e),{prefix:"",important:!1,separator:":"}];return normalizeConfig(defaults({theme:resolveFunctionKeys(mergeExtensions(mergeThemes(t.map(e=>e?.theme??{})))),corePlugins:resolveCorePlugins(t.map(e=>e.corePlugins)),plugins:resolvePluginLists(e.map(e=>e?.plugins??[]))},...t))}