import selectorParser from"postcss-selector-parser";import unescape from"postcss-selector-parser/dist/util/unesc";import escapeClassName from"../util/escapeClassName";import prefixSelector from"../util/prefixSelector";import{movePseudos}from"./pseudoElements";import{splitAtTopLevelOnly}from"./splitAtTopLevelOnly";let MERGE=":merge";export function formatVariantSelector(e,{context:t,candidate:r}){let o=t?.tailwindConfig.prefix??"",s=e.map(e=>{let t=selectorParser().astSync(e.format);return{...e,ast:e.respectPrefix?prefixSelector(o,t):t}}),l=selectorParser.root({nodes:[selectorParser.selector({nodes:[selectorParser.className({value:escapeClassName(r)})]})]});for(let{ast:e}of s)[l,e]=handleMergePseudo(l,e),e.walkNesting(e=>e.replaceWith(...l.nodes[0].nodes)),l=e;return l}function simpleSelectorForNode(e){let t=[];for(;e.prev()&&"combinator"!==e.prev().type;)e=e.prev();for(;e&&"combinator"!==e.type;)t.push(e),e=e.next();return t}function resortSelector(e){return e.sort((t,r)=>"tag"===t.type&&"class"===r.type?-1:"class"===t.type&&"tag"===r.type?1:"class"===t.type&&"pseudo"===r.type&&r.value.startsWith("::")?-1:"pseudo"===t.type&&t.value.startsWith("::")&&"class"===r.type?1:e.index(t)-e.index(r)),e}export function eliminateIrrelevantSelectors(e,t){let r=!1;e.walk(e=>{if("class"===e.type&&e.value===t)return r=!0,!1}),r||e.remove()}export function finalizeSelector(e,t,{context:r,candidate:o,base:s}){s=s??splitAtTopLevelOnly(o,r?.tailwindConfig?.separator??":").pop();let l=selectorParser().astSync(e);if(l.walkClasses(e=>{e.raws&&e.value.includes(s)&&(e.raws.value=escapeClassName(unescape(e.raws.value)))}),l.each(e=>eliminateIrrelevantSelectors(e,s)),0===l.length)return null;let a=Array.isArray(t)?formatVariantSelector(t,{context:r,candidate:o}):t;if(null===a)return l.toString();let n=selectorParser.comment({value:"/*__simple__*/"}),i=selectorParser.comment({value:"/*__simple__*/"});return l.walkClasses(e=>{if(e.value!==s)return;let t=e.parent,r=a.nodes[0].nodes;if(1===t.nodes.length)return void e.replaceWith(...r);let o=simpleSelectorForNode(e);t.insertBefore(o[0],n),t.insertAfter(o[o.length-1],i);for(let e of r)t.insertBefore(o[0],e.clone());e.remove(),o=simpleSelectorForNode(n);let l=t.index(n);t.nodes.splice(l,o.length,...resortSelector(selectorParser.selector({nodes:o})).nodes),n.remove(),i.remove()}),l.walkPseudos(e=>{e.value===MERGE&&e.replaceWith(e.nodes)}),l.each(e=>movePseudos(e)),l.toString()}export function handleMergePseudo(e,t){let r=[];return e.walkPseudos(e=>{e.value===MERGE&&r.push({pseudo:e,value:e.nodes[0].toString()})}),t.walkPseudos(e=>{if(e.value!==MERGE)return;let t=e.nodes[0].toString(),o=r.find(e=>e.value===t);if(!o)return;let s=[],l=e.next();for(;l&&"combinator"!==l.type;)s.push(l),l=l.next();let a=l;o.pseudo.parent.insertAfter(o.pseudo,selectorParser.selector({nodes:s.map(e=>e.clone())})),e.remove(),s.forEach(e=>e.remove()),a&&"combinator"===a.type&&a.remove()}),[e,t]}