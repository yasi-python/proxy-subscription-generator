export default function collapseDuplicateDeclarations(){return e=>{e.walkRules(e=>{let t=new Map,l=new Set([]),o=new Map;e.walkDecls(r=>{if(r.parent===e){if(t.has(r.prop)){if(t.get(r.prop).value===r.value)return l.add(t.get(r.prop)),void t.set(r.prop,r);o.has(r.prop)||o.set(r.prop,new Set),o.get(r.prop).add(t.get(r.prop)),o.get(r.prop).add(r)}t.set(r.prop,r)}});for(let e of l)e.remove();for(let e of o.values()){let t=new Map;for(let l of e){let e=resolveUnit(l.value);null!==e&&(t.has(e)||t.set(e,new Set),t.get(e).add(l))}for(let e of t.values()){let t=Array.from(e).slice(0,-1);for(let e of t)e.remove()}}})}}let UNITLESS_NUMBER=Symbol("unitless-number");function resolveUnit(e){let t=/^-?\d*.?\d+([\w%]+)?$/g.exec(e);return t?t[1]??UNITLESS_NUMBER:null}