import fs from"fs";import LRU from"@alloc/quick-lru";import hash from"../util/hashConfig";import resolveConfig from"../public/resolve-config";import resolveConfigPath from"../util/resolveConfigPath";import{getContext,getFileModifiedMap}from"./setupContextUtils";import parseDependency from"../util/parseDependency";import{validateConfig}from"../util/validateConfig.js";import{parseCandidateFiles,resolvedChangedContent}from"./content.js";import{loadConfig}from"../lib/load-config";import getModuleDependencies from"./getModuleDependencies";let configPathCache=new LRU({maxSize:100}),candidateFilesCache=new WeakMap;function getCandidateFiles(e,t){if(candidateFilesCache.has(e))return candidateFilesCache.get(e);let i=parseCandidateFiles(e,t);return candidateFilesCache.set(e,i).get(e)}function getTailwindConfig(e){let t=resolveConfigPath(e);if(null!==t){let[e,i,o,n]=configPathCache.get(t)||[],a=getModuleDependencies(t),r=!1,l=new Map;for(let e of a){let t=fs.statSync(e).mtimeMs;l.set(e,t),(!n||!n.has(e)||t>n.get(e))&&(r=!0)}if(!r)return[e,t,i,o];for(let e of a)delete require.cache[e];let f=validateConfig(resolveConfig(loadConfig(t))),s=hash(f);return configPathCache.set(t,[f,s,a,l]),[f,t,s,a]}let i=resolveConfig(e?.config??e??{});return i=validateConfig(i),[i,null,hash(i),[]]}export default function setupTrackingContext(e){return({tailwindDirectives:t,registerDependency:i})=>(o,n)=>{let[a,r,l,f]=getTailwindConfig(e),s=new Set(f);if(t.size>0){s.add(n.opts.from);for(let e of n.messages)"dependency"===e.type&&s.add(e.file)}let[d,,g]=getContext(o,n,a,r,l,s),c=getFileModifiedMap(d),p=getCandidateFiles(d,a);if(t.size>0){for(let e of p)for(let t of parseDependency(e))i(t);let[e,t]=resolvedChangedContent(d,p,c);for(let t of e)d.changedContent.push(t);for(let[e,i]of t.entries())g.set(e,i)}for(let e of f)i({type:"dependency",file:e});for(let[e,t]of g.entries())c.set(e,t);return d}}