import postcss from"postcss";import selectorParser from"postcss-selector-parser";import{flagEnabled}from"../featureFlags";let getNode={id:e=>selectorParser.attribute({attribute:"id",operator:"=",value:e.value,quoteMark:'"'})};function minimumImpactSelector(e){let t=e.filter(e=>"pseudo"!==e.type||(e.nodes.length>0||(e.value.startsWith("::")||[":before",":after",":first-line",":first-letter"].includes(e.value)))).reverse(),r=new Set(["tag","class","id","attribute"]),s=t.findIndex(e=>r.has(e.type));if(-1===s)return t.reverse().join("").trim();let o=t[s],l=getNode[o.type]?getNode[o.type](o):o;t=t.slice(0,s);let a=t.findIndex(e=>"combinator"===e.type&&">"===e.value);return-1!==a&&(t.splice(0,a),t.unshift(selectorParser.universal())),[l,...t.reverse()].join("").trim()}export let elementSelectorParser=selectorParser(e=>e.map(e=>minimumImpactSelector(e.split(e=>"combinator"===e.type&&" "===e.value).pop())));let cache=new Map;function extractElementSelector(e){return cache.has(e)||cache.set(e,elementSelectorParser.transformSync(e)),cache.get(e)}export default function resolveDefaultsAtRules({tailwindConfig:e}){return t=>{let r=new Map,s=new Set;if(t.walkAtRules("defaults",e=>{if(e.nodes&&e.nodes.length>0)return void s.add(e);let t=e.params;r.has(t)||r.set(t,new Set),r.get(t).add(e.parent),e.remove()}),flagEnabled(e,"optimizeUniversalDefaults"))for(let e of s){let t=new Map,s=r.get(e.params)??[];for(let e of s)for(let r of extractElementSelector(e.selector)){let e=r.includes(":-")||r.includes("::-")||r.includes(":has")?r:"__DEFAULT__",s=t.get(e)??new Set;t.set(e,s),s.add(r)}if(0!==t.size){for(let[,r]of t){let t=postcss.rule({source:e.source});t.selectors=[...r],t.append(e.nodes.map(e=>e.clone())),e.before(t)}e.remove()}else e.remove()}else if(s.size){let e=postcss.rule({selectors:["*","::before","::after"]});for(let t of s)e.append(t.nodes),e.parent||t.before(e),e.source||(e.source=t.source),t.remove();let t=e.clone({selectors:["::backdrop"]});e.after(t)}}}