import bigSign from"../util/bigSign";import{remapBitfield}from"./remap-bitfield.js";export class Offsets{constructor(){this.offsets={defaults:0n,base:0n,components:0n,utilities:0n,variants:0n,user:0n},this.layerPositions={defaults:0n,base:1n,components:2n,utilities:3n,user:4n,variants:5n},this.reservedVariantBits=0n,this.variantOffsets=new Map}create(r){return{layer:r,parentLayer:r,arbitrary:0n,variants:0n,parallelIndex:0n,index:this.offsets[r]++,propertyOffset:0n,property:"",options:[]}}arbitraryProperty(r){return{...this.create("utilities"),arbitrary:1n,property:r}}forVariant(r,t=0){let e=this.variantOffsets.get(r);if(void 0===e)throw new Error(`Cannot find offset for unknown variant ${r}`);return{...this.create("variants"),variants:e<<BigInt(t)}}applyVariantOffset(r,t,e){return e.variant=t.variants,{...r,layer:"variants",parentLayer:"variants"===r.layer?r.parentLayer:r.layer,variants:r.variants|t.variants,options:e.sort?[].concat(e,r.options):r.options,parallelIndex:max([r.parallelIndex,t.parallelIndex])}}applyParallelOffset(r,t){return{...r,parallelIndex:BigInt(t)}}recordVariants(r,t){for(let e of r)this.recordVariant(e,t(e))}recordVariant(r,t=1){return this.variantOffsets.set(r,1n<<this.reservedVariantBits),this.reservedVariantBits+=BigInt(t),{...this.create("variants"),variants:this.variantOffsets.get(r)}}compare(r,t){if(r.layer!==t.layer)return this.layerPositions[r.layer]-this.layerPositions[t.layer];if(r.parentLayer!==t.parentLayer)return this.layerPositions[r.parentLayer]-this.layerPositions[t.parentLayer];for(let e of r.options)for(let a of t.options){if(e.id!==a.id)continue;if(!e.sort||!a.sort)continue;let i=max([e.variant,a.variant])??0n,n=~(i|i-1n);if((r.variants&n)!==(t.variants&n))continue;let s=e.sort({value:e.value,modifier:e.modifier},{value:a.value,modifier:a.modifier});if(0!==s)return s}return r.variants!==t.variants?r.variants-t.variants:r.parallelIndex!==t.parallelIndex?r.parallelIndex-t.parallelIndex:r.arbitrary!==t.arbitrary?r.arbitrary-t.arbitrary:r.propertyOffset!==t.propertyOffset?r.propertyOffset-t.propertyOffset:r.index-t.index}recalculateVariantOffsets(){let r=Array.from(this.variantOffsets.entries()).filter(([r])=>r.startsWith("[")).sort(([r],[t])=>fastCompare(r,t)),t=r.map(([,r])=>r).sort((r,t)=>bigSign(r-t));return r.map(([,r],e)=>[r,t[e]]).filter(([r,t])=>r!==t)}remapArbitraryVariantOffsets(r){let t=this.recalculateVariantOffsets();return 0===t.length?r:r.map(r=>{let[e,a]=r;return e={...e,variants:remapBitfield(e.variants,t)},[e,a]})}sortArbitraryProperties(r){let t=new Set;for(let[e]of r)1n===e.arbitrary&&t.add(e.property);if(0===t.size)return r;let e=Array.from(t).sort(),a=new Map,i=1n;for(let r of e)a.set(r,i++);return r.map(r=>{let[t,e]=r;return t={...t,propertyOffset:a.get(t.property)??0n},[t,e]})}sort(r){return r=this.remapArbitraryVariantOffsets(r),(r=this.sortArbitraryProperties(r)).sort(([r],[t])=>bigSign(this.compare(r,t)))}}function max(r){let t=null;for(const e of r)t=t??e,t=t>e?t:e;return t}function fastCompare(r,t){let e=r.length,a=t.length,i=e<a?e:a;for(let e=0;e<i;e++){let a=r.charCodeAt(e)-t.charCodeAt(e);if(0!==a)return a}return e-a}