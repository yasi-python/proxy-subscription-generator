import fs from"fs";import path from"path";import isGlob from"is-glob";import fastGlob from"fast-glob";import normalizePath from"normalize-path";import{parseGlob}from"../util/parseGlob";import{env}from"./sharedState";import log from"../util/log";import micromatch from"micromatch";export function parseCandidateFiles(e,t){let n=t.content.files;n=n.filter(e=>"string"==typeof e),n=n.map(normalizePath);let o=fastGlob.generateTasks(n),a=[],r=[];for(const e of o)a.push(...e.positive.map(e=>parseFilePath(e,!1))),r.push(...e.negative.map(e=>parseFilePath(e,!0)));let i=[...a,...r];return i=resolveRelativePaths(e,i),i=i.flatMap(resolvePathSymlinks),i=i.map(resolveGlobPattern),i}function parseFilePath(e,t){let n={original:e,base:e,ignore:t,pattern:e,glob:null};return isGlob(e)&&Object.assign(n,parseGlob(e)),n}function resolveGlobPattern(e){let t=normalizePath(e.base);return t=fastGlob.escapePath(t),e.pattern=e.glob?`${t}/${e.glob}`:t,e.pattern=e.ignore?`!${e.pattern}`:e.pattern,e}function resolveRelativePaths(e,t){let n=[];return e.userConfigPath&&e.tailwindConfig.content.relative&&(n=[path.dirname(e.userConfigPath)]),t.map(e=>(e.base=path.resolve(...n,e.base),e))}function resolvePathSymlinks(e){let t=[e];try{let n=fs.realpathSync(e.base);n!==e.base&&t.push({...e,base:n})}catch{}return t}export function resolvedChangedContent(e,t,n){let o=e.tailwindConfig.content.files.filter(e=>"string"==typeof e.raw).map(({raw:e,extension:t="html"})=>({content:e,extension:t})),[a,r]=resolveChangedFiles(t,n);for(let e of a){let t=path.extname(e).slice(1);o.push({file:e,extension:t})}return[o,r]}const LARGE_DIRECTORIES=["node_modules"],LARGE_DIRECTORIES_REGEX=new RegExp(`(${LARGE_DIRECTORIES.map(e=>String.raw`\b${e}\b`).join("|")})`);export function createBroadPatternCheck(e){let t=e.some(e=>e.includes("**")&&!LARGE_DIRECTORIES_REGEX.test(e));if(!t)return()=>{};let n=[],o=[];for(let t of e){let e=micromatch.matcher(t);LARGE_DIRECTORIES_REGEX.test(t)&&o.push(e),n.push(e)}let a=!1;return t=>{if(a)return;if(o.some(e=>e(t)))return;let r=n.findIndex(e=>e(t));if(-1===r)return;let i=e[r],l=path.relative(process.cwd(),i);"."!==l[0]&&(l=`./${l}`);let s=LARGE_DIRECTORIES.find(e=>t.includes(e));s&&(a=!0,log.warn("broad-content-glob-pattern",[`Your \`content\` configuration includes a pattern which looks like it's accidentally matching all of \`${s}\` and can cause serious performance issues.`,`Pattern: \`${l}\``,"See our documentation for recommendations:","https://tailwindcss.com/docs/content-configuration#pattern-recommendations"]))}}function resolveChangedFiles(e,t){let n=e.map(e=>e.pattern),o=new Map,a=createBroadPatternCheck(n),r=new Set;env.DEBUG&&console.time("Finding changed files");let i=fastGlob.sync(n,{absolute:!0});for(let e of i){a(e);let n=t.get(e)||-1/0,i=fs.statSync(e).mtimeMs;i>n&&(r.add(e),o.set(e,i))}return env.DEBUG&&console.timeEnd("Finding changed files"),[r,o]}