import fs from"fs";import LRU from"@alloc/quick-lru";import*as sharedState from"./sharedState";import{generateRules}from"./generateRules";import log from"../util/log";import cloneNodes from"../util/cloneNodes";import{defaultExtractor}from"./defaultExtractor";let env=sharedState.env;const builtInExtractors={DEFAULT:defaultExtractor},builtInTransformers={DEFAULT:e=>e,svelte:e=>e.replace(/(?:^|\s)class:/g," ")};function getExtractor(e,t){let n=e.tailwindConfig.content.extract;return n[t]||n.DEFAULT||builtInExtractors[t]||builtInExtractors.DEFAULT(e)}function getTransformer(e,t){let n=e.content.transform;return n[t]||n.DEFAULT||builtInTransformers[t]||builtInTransformers.DEFAULT}let extractorCache=new WeakMap;function getClassCandidates(e,t,n,s){extractorCache.has(t)||extractorCache.set(t,new LRU({maxSize:25e3}));for(let o of e.split("\n"))if(o=o.trim(),!s.has(o))if(s.add(o),extractorCache.get(t).has(o))for(let e of extractorCache.get(t).get(o))n.add(e);else{let e=t(o).filter(e=>"!*"!==e),s=new Set(e);for(let e of s)n.add(e);extractorCache.get(t).set(o,s)}}function buildStylesheet(e,t){let n=t.offsets.sort(e),s={base:new Set,defaults:new Set,components:new Set,utilities:new Set,variants:new Set};for(let[e,t]of n)s[e.layer].add(t);return s}export default function expandTailwindAtRules(e){return async t=>{let n={base:null,components:null,utilities:null,variants:null};if(t.walkAtRules(e=>{"tailwind"===e.name&&Object.keys(n).includes(e.params)&&(n[e.params]=e)}),Object.values(n).every(e=>null===e))return t;let s=new Set([...e.candidates??[],sharedState.NOT_ON_DEMAND]),o=new Set;env.DEBUG&&console.time("Reading changed files");let r=[];for(let t of e.changedContent){let n=getTransformer(e.tailwindConfig,t.extension),s=getExtractor(e,t.extension);r.push([t,{transformer:n,extractor:s}])}for(let e=0;e<r.length;e+=500){let t=r.slice(e,e+500);await Promise.all(t.map(async([{file:e,content:t},{transformer:n,extractor:r}])=>{getClassCandidates(n(t=e?await fs.promises.readFile(e,"utf8"):t),r,s,o)}))}env.DEBUG&&console.timeEnd("Reading changed files");let a=e.classCache.size;env.DEBUG&&console.time("Generate rules"),env.DEBUG&&console.time("Sorting candidates");let l=new Set([...s].sort((e,t)=>e===t?0:e<t?-1:1));env.DEBUG&&console.timeEnd("Sorting candidates"),generateRules(l,e),env.DEBUG&&console.timeEnd("Generate rules"),env.DEBUG&&console.time("Build stylesheet"),null!==e.stylesheetCache&&e.classCache.size===a||(e.stylesheetCache=buildStylesheet([...e.ruleCache],e)),env.DEBUG&&console.timeEnd("Build stylesheet");let{defaults:i,base:c,components:u,utilities:d,variants:f}=e.stylesheetCache;n.base&&(n.base.before(cloneNodes([...i,...c],n.base.source,{layer:"base"})),n.base.remove()),n.components&&(n.components.before(cloneNodes([...u],n.components.source,{layer:"components"})),n.components.remove()),n.utilities&&(n.utilities.before(cloneNodes([...d],n.utilities.source,{layer:"utilities"})),n.utilities.remove());const m=Array.from(f).filter(e=>{const t=e.raws.tailwind?.parentLayer;return"components"===t?null!==n.components:"utilities"!==t||null!==n.utilities});n.variants?(n.variants.before(cloneNodes(m,n.variants.source,{layer:"variants"})),n.variants.remove()):m.length>0&&t.append(cloneNodes(m,t.source,{layer:"variants"})),t.source.end=t.source.end??t.source.start;const h=m.some(e=>"utilities"===e.raws.tailwind?.parentLayer);n.utilities&&0===d.size&&!h&&log.warn("content-problems",["No utility classes were detected in your source files. If this is unexpected, double-check the `content` option in your Tailwind CSS configuration.","https://tailwindcss.com/docs/content-configuration"]),env.DEBUG&&(console.log("Potential classes: ",s.size),console.log("Active contexts: ",sharedState.contextSourcesMap.size)),e.changedContent=[],t.walkAtRules("layer",e=>{Object.keys(n).includes(e.params)&&e.remove()})}}