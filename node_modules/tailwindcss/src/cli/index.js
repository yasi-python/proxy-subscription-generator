#!/usr/bin/env node
import path from"path";import arg from"arg";import fs from"fs";import{build}from"./build";import{help}from"./help";import{init}from"./init";function oneOf(...t){return Object.assign((e=!0)=>{for(let i of t){let t=i(e);if(t===e)return t}throw new Error("...")},{manualParsing:!0})}let commands={init:{run:init,args:{"--esm":{type:Boolean,description:"Initialize configuration file as ESM"},"--ts":{type:Boolean,description:"Initialize configuration file as TypeScript"},"--postcss":{type:Boolean,description:"Initialize a `postcss.config.js` file"},"--full":{type:Boolean,description:"Include the default values for all options in the generated configuration file"},"-f":"--full","-p":"--postcss"}},build:{run:build,args:{"--input":{type:String,description:"Input file"},"--output":{type:String,description:"Output file"},"--watch":{type:oneOf(String,Boolean),description:"Watch for changes and rebuild as needed"},"--poll":{type:Boolean,description:"Use polling instead of filesystem events when watching"},"--content":{type:String,description:"Content paths to use for removing unused classes"},"--purge":{type:String,deprecated:!0},"--postcss":{type:oneOf(String,Boolean),description:"Load custom PostCSS configuration"},"--minify":{type:Boolean,description:"Minify the output"},"--config":{type:String,description:"Path to a custom config file"},"--no-autoprefixer":{type:Boolean,description:"Disable autoprefixer"},"-c":"--config","-i":"--input","-o":"--output","-m":"--minify","-w":"--watch","-p":"--poll"}}},sharedFlags={"--help":{type:Boolean,description:"Display usage information"},"-h":"--help"};process.stdout.isTTY&&(void 0===process.argv[2]||process.argv.slice(2).every(t=>void 0!==sharedFlags[t]))&&(help({usage:["tailwindcss [--input input.css] [--output output.css] [--watch] [options...]","tailwindcss init [--full] [--postcss] [options...]"],commands:Object.keys(commands).filter(t=>"build"!==t).map(t=>`${t} [options]`),options:{...commands.build.args,...sharedFlags}}),process.exit(0));let command=((t="")=>t.startsWith("-")?void 0:t)(process.argv[2])||"build";void 0===commands[command]&&(fs.existsSync(path.resolve(command))?command="build":(help({message:`Invalid command: ${command}`,usage:["tailwindcss <command> [options]"],commands:Object.keys(commands).filter(t=>"build"!==t).map(t=>`${t} [options]`),options:sharedFlags}),process.exit(1)));let{args:flags,run:run}=commands[command],args=(()=>{try{let t=arg(Object.fromEntries(Object.entries({...flags,...sharedFlags}).filter(([t,e])=>!e?.type?.manualParsing).map(([t,e])=>[t,"object"==typeof e?e.type:e])),{permissive:!0});for(let e=t._.length-1;e>=0;--e){let i=t._[e];if(!i.startsWith("-"))continue;let[s,o]=i.split("="),n=flags[s];for(;"string"==typeof n;)s=n,n=flags[n];if(!n)continue;let a=[],r=e+1;if(void 0===o){for(;t._[r]&&!t._[r].startsWith("-");)a.push(t._[r++]);t._.splice(e,1+a.length),o=0===a.length?void 0:1===a.length?a[0]:a}else t._.splice(e,1);t[s]=n.type(o,s)}return t._[0]!==command&&t._.unshift(command),t}catch(t){throw"ARG_UNKNOWN_OPTION"===t.code&&(help({message:t.message,usage:["tailwindcss <command> [options]"],options:sharedFlags}),process.exit(1)),t}})();args["--help"]&&(help({options:{...flags,...sharedFlags},usage:[`tailwindcss ${command} [options]`]}),process.exit(0)),run(args);