import fs from"fs";import path from"path";function isESM(){const s=path.resolve("./package.json");try{let e=JSON.parse(fs.readFileSync(s,"utf8"));return e.type&&"module"===e.type}catch(s){return!1}}export function init(s){let e=[],t=s["--ts"]||s["--esm"]||isESM(),i=s["--ts"]?"ts":t?"js":"cjs",a=s["--ts"]?"ts":"js",l=path.resolve(s._[1]??`./tailwind.config.${a}`);if(fs.existsSync(l))e.push(`${path.basename(l)} already exists.`);else{let t=fs.readFileSync(s["--full"]?path.resolve(__dirname,"../../../stubs/config.full.js"):path.resolve(__dirname,"../../../stubs/config.simple.js"),"utf8"),a=fs.readFileSync(path.resolve(__dirname,`../../../stubs/tailwind.config.${i}`),"utf8");t=t.replace("../colors","tailwindcss/colors"),a=a.replace("__CONFIG__",t.replace("module.exports =","").trim()).trim()+"\n\n",fs.writeFileSync(l,a,"utf8"),e.push(`Created Tailwind CSS config file: ${path.basename(l)}`)}if(s["--postcss"]){let s=path.resolve("./postcss.config.js");if(fs.existsSync(s))e.push(`${path.basename(s)} already exists.`);else{let i=fs.readFileSync(t?path.resolve(__dirname,"../../../stubs/postcss.config.js"):path.resolve(__dirname,"../../../stubs/postcss.config.cjs"),"utf8");fs.writeFileSync(s,i,"utf8"),e.push(`Created PostCSS config file: ${path.basename(s)}`)}}if(e.length>0){console.log();for(let s of e)console.log(s)}}