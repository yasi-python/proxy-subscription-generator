import fs from"fs";import path from"path";export function indentRecursive(e,r=0){e.each&&e.each((t,i)=>{t.raws.before&&t.raws.before.trim()&&!t.raws.before.includes("\n")||(t.raws.before=`\n${"rule"!==e.type&&i>0?"\n":""}${"  ".repeat(r)}`),t.raws.after=`\n${"  ".repeat(r)}`,indentRecursive(t,r+1)})}export function formatNodes(e){indentRecursive(e),e.first&&(e.first.raws.before="")}export async function readFileWithRetries(e,r=5){for(let t=0;t<=r;t++)try{return await fs.promises.readFile(e,"utf8")}catch(e){if(t!==r&&("ENOENT"===e.code||"EBUSY"===e.code)){await new Promise(e=>setTimeout(e,10));continue}throw e}}export function drainStdin(){return new Promise((e,r)=>{let t="";process.stdin.on("data",e=>{t+=e}),process.stdin.on("end",()=>e(t)),process.stdin.on("error",e=>r(e))})}export async function outputFile(e,r){try{if(await fs.promises.readFile(e,"utf8")===r)return}catch{}await fs.promises.mkdir(path.dirname(e),{recursive:!0}),await fs.promises.writeFile(e,r,"utf8")}