import chokidar from"chokidar";import fs from"fs";import micromatch from"micromatch";import normalizePath from"normalize-path";import path from"path";import{readFileWithRetries}from"./utils.js";export function createWatcher(e,{state:t,rebuild:r}){let o,a,i=e["--poll"],n=i||"win32"===process.platform,l=chokidar.watch([],{atomic:!0,usePolling:i,interval:i?10:void 0,ignoreInitial:!0,awaitWriteFinish:!!n&&{stabilityThreshold:50,pollInterval:10}}),s=Promise.resolve(),c=[],h=new Set;async function m(){let e=c.splice(0);return 0===e.length?Promise.resolve():(e.forEach(e=>h.delete(e.file)),r(e).then(()=>{},e=>{console.error(e.toString())}))}function d(e,t=null,r=!1){return e=path.resolve(e),h.has(e)&&!r?Promise.resolve():(h.add(e),c.push({file:e,content:t??(()=>fs.promises.readFile(e,"utf8")),extension:path.extname(e).slice(1)}),o&&(clearTimeout(o),a()),s=s.then(()=>new Promise((e,t)=>{o=setTimeout(e,10),a=t})),s=s.then(m,m),s)}return l.on("change",e=>d(e)),l.on("add",e=>d(e)),l.on("unlink",e=>{e=normalizePath(e),micromatch.some([e],t.contentPatterns.dynamic)||l.add(e)}),l.on("raw",(e,r,o)=>{if("rename"!==e||null===r)return;let a=o.watchedPath;r=a.endsWith(r)?a:path.join(a,r),micromatch.some([r],t.contentPatterns.all)&&(h.has(r)||(h.add(r),async function(){try{let e=await readFileWithRetries(path.resolve(r));if(void 0===e)return;await d(r,()=>e,!0)}catch{}}().then(()=>{h.delete(r)})))}),{fswatcher:l,refreshWatchedFiles(){l.add(Array.from(t.contextDependencies)),l.add(Array.from(t.configBag.dependencies)),l.add(t.contentPatterns.all)}}}