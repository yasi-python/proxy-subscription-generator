"use strict";let Container=require("./container"),Document=require("./document"),MapGenerator=require("./map-generator"),parse=require("./parse"),Result=require("./result"),Root=require("./root"),stringify=require("./stringify"),{isClean:isClean,my:my}=require("./symbols"),warnOnce=require("./warn-once");const TYPE_TO_CLASS_NAME={atrule:"AtRule",comment:"Comment",decl:"Declaration",document:"Document",root:"Root",rule:"Rule"},PLUGIN_PROPS={AtRule:!0,AtRuleExit:!0,Comment:!0,CommentExit:!0,Declaration:!0,DeclarationExit:!0,Document:!0,DocumentExit:!0,Once:!0,OnceExit:!0,postcssPlugin:!0,prepare:!0,Root:!0,RootExit:!0,Rule:!0,RuleExit:!0},NOT_VISITORS={Once:!0,postcssPlugin:!0,prepare:!0},CHILDREN=0;function isPromise(t){return"object"==typeof t&&"function"==typeof t.then}function getEvents(t){let e=!1,s=TYPE_TO_CLASS_NAME[t.type];return"decl"===t.type?e=t.prop.toLowerCase():"atrule"===t.type&&(e=t.name.toLowerCase()),e&&t.append?[s,s+"-"+e,0,s+"Exit",s+"Exit-"+e]:e?[s,s+"-"+e,s+"Exit",s+"Exit-"+e]:t.append?[s,0,s+"Exit"]:[s,s+"Exit"]}function toStack(t){let e;return e="document"===t.type?["Document",0,"DocumentExit"]:"root"===t.type?["Root",0,"RootExit"]:getEvents(t),{eventIndex:0,events:e,iterator:0,node:t,visitorIndex:0,visitors:[]}}function cleanMarks(t){return t[isClean]=!1,t.nodes&&t.nodes.forEach(t=>cleanMarks(t)),t}let postcss={};class LazyResult{get content(){return this.stringify().content}get css(){return this.stringify().css}get map(){return this.stringify().map}get messages(){return this.sync().messages}get opts(){return this.result.opts}get processor(){return this.result.processor}get root(){return this.sync().root}get[Symbol.toStringTag](){return"LazyResult"}constructor(t,e,s){let r;if(this.stringified=!1,this.processed=!1,"object"!=typeof e||null===e||"root"!==e.type&&"document"!==e.type)if(e instanceof LazyResult||e instanceof Result)r=cleanMarks(e.root),e.map&&(void 0===s.map&&(s.map={}),s.map.inline||(s.map.inline=!1),s.map.prev=e.map);else{let i=parse;s.syntax&&(i=s.syntax.parse),s.parser&&(i=s.parser),i.parse&&(i=i.parse);try{r=i(e,s)}catch(t){this.processed=!0,this.error=t}r&&!r[my]&&Container.rebuild(r)}else r=cleanMarks(e);this.result=new Result(t,r,s),this.helpers={...postcss,postcss:postcss,result:this.result},this.plugins=this.processor.plugins.map(t=>"object"==typeof t&&t.prepare?{...t,...t.prepare(this.result)}:t)}async(){return this.error?Promise.reject(this.error):this.processed?Promise.resolve(this.result):(this.processing||(this.processing=this.runAsync()),this.processing)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}getAsyncError(){throw new Error("Use process(css).then(cb) to work with async plugins")}handleError(t,e){let s=this.result.lastPlugin;try{if(e&&e.addToError(t),this.error=t,"CssSyntaxError"!==t.name||t.plugin){if(s.postcssVersion&&"production"!==process.env.NODE_ENV){let t=s.postcssPlugin,e=s.postcssVersion,r=this.result.processor.version,i=e.split("."),n=r.split(".");(i[0]!==n[0]||parseInt(i[1])>parseInt(n[1]))&&console.error("Unknown error from PostCSS plugin. Your current PostCSS version is "+r+", but "+t+" uses "+e+". Perhaps this is the source of the error below.")}}else t.plugin=s.postcssPlugin,t.setMessage()}catch(t){console&&console.error&&console.error(t)}return t}prepareVisitors(){this.listeners={};let t=(t,e,s)=>{this.listeners[e]||(this.listeners[e]=[]),this.listeners[e].push([t,s])};for(let e of this.plugins)if("object"==typeof e)for(let s in e){if(!PLUGIN_PROPS[s]&&/^[A-Z]/.test(s))throw new Error(`Unknown event ${s} in ${e.postcssPlugin}. Try to update PostCSS (${this.processor.version} now).`);if(!NOT_VISITORS[s])if("object"==typeof e[s])for(let r in e[s])t(e,"*"===r?s:s+"-"+r.toLowerCase(),e[s][r]);else"function"==typeof e[s]&&t(e,s,e[s])}this.hasListener=Object.keys(this.listeners).length>0}async runAsync(){this.plugin=0;for(let t=0;t<this.plugins.length;t++){let e=this.plugins[t],s=this.runOnRoot(e);if(isPromise(s))try{await s}catch(t){throw this.handleError(t)}}if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[isClean];){t[isClean]=!0;let e=[toStack(t)];for(;e.length>0;){let t=this.visitTick(e);if(isPromise(t))try{await t}catch(t){let s=e[e.length-1].node;throw this.handleError(t,s)}}}if(this.listeners.OnceExit)for(let[e,s]of this.listeners.OnceExit){this.result.lastPlugin=e;try{if("document"===t.type){let e=t.nodes.map(t=>s(t,this.helpers));await Promise.all(e)}else await s(t,this.helpers)}catch(t){throw this.handleError(t)}}}return this.processed=!0,this.stringify()}runOnRoot(t){this.result.lastPlugin=t;try{if("object"==typeof t&&t.Once){if("document"===this.result.root.type){let e=this.result.root.nodes.map(e=>t.Once(e,this.helpers));return isPromise(e[0])?Promise.all(e):e}return t.Once(this.result.root,this.helpers)}if("function"==typeof t)return t(this.result.root,this.result)}catch(t){throw this.handleError(t)}}stringify(){if(this.error)throw this.error;if(this.stringified)return this.result;this.stringified=!0,this.sync();let t=this.result.opts,e=stringify;t.syntax&&(e=t.syntax.stringify),t.stringifier&&(e=t.stringifier),e.stringify&&(e=e.stringify);let s=new MapGenerator(e,this.result.root,this.result.opts).generate();return this.result.css=s[0],this.result.map=s[1],this.result}sync(){if(this.error)throw this.error;if(this.processed)return this.result;if(this.processed=!0,this.processing)throw this.getAsyncError();for(let t of this.plugins)if(isPromise(this.runOnRoot(t)))throw this.getAsyncError();if(this.prepareVisitors(),this.hasListener){let t=this.result.root;for(;!t[isClean];)t[isClean]=!0,this.walkSync(t);if(this.listeners.OnceExit)if("document"===t.type)for(let e of t.nodes)this.visitSync(this.listeners.OnceExit,e);else this.visitSync(this.listeners.OnceExit,t)}return this.result}then(t,e){return"production"!==process.env.NODE_ENV&&("from"in this.opts||warnOnce("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.")),this.async().then(t,e)}toString(){return this.css}visitSync(t,e){for(let[s,r]of t){let i;this.result.lastPlugin=s;try{i=r(e,this.helpers)}catch(t){throw this.handleError(t,e.proxyOf)}if("root"!==e.type&&"document"!==e.type&&!e.parent)return!0;if(isPromise(i))throw this.getAsyncError()}}visitTick(t){let e=t[t.length-1],{node:s,visitors:r}=e;if("root"!==s.type&&"document"!==s.type&&!s.parent)return void t.pop();if(r.length>0&&e.visitorIndex<r.length){let[i,n]=r[e.visitorIndex];e.visitorIndex+=1,e.visitorIndex===r.length&&(e.visitors=[],e.visitorIndex=0),this.result.lastPlugin=i;try{return n(s.toProxy(),this.helpers)}catch(t){throw this.handleError(t,s)}}if(0!==e.iterator){let r,i=e.iterator;for(;r=s.nodes[s.indexes[i]];)if(s.indexes[i]+=1,!r[isClean])return r[isClean]=!0,void t.push(toStack(r));e.iterator=0,delete s.indexes[i]}let i=e.events;for(;e.eventIndex<i.length;){let t=i[e.eventIndex];if(e.eventIndex+=1,0===t)return void(s.nodes&&s.nodes.length&&(s[isClean]=!0,e.iterator=s.getIterator()));if(this.listeners[t])return void(e.visitors=this.listeners[t])}t.pop()}walkSync(t){t[isClean]=!0;let e=getEvents(t);for(let s of e)if(0===s)t.nodes&&t.each(t=>{t[isClean]||this.walkSync(t)});else{let e=this.listeners[s];if(e&&this.visitSync(e,t.toProxy()))return}}warnings(){return this.sync().warnings()}}LazyResult.registerPostcss=t=>{postcss=t},module.exports=LazyResult,LazyResult.default=LazyResult,Root.registerLazyResult(LazyResult),Document.registerLazyResult(LazyResult);