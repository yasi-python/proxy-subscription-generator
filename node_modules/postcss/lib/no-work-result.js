"use strict";let MapGenerator=require("./map-generator"),parse=require("./parse");const Result=require("./result");let stringify=require("./stringify"),warnOnce=require("./warn-once");class NoWorkResult{get content(){return this.result.css}get css(){return this.result.css}get map(){return this.result.map}get messages(){return[]}get opts(){return this.result.opts}get processor(){return this.result.processor}get root(){if(this._root)return this._root;let t,r=parse;try{t=r(this._css,this._opts)}catch(t){this.error=t}if(this.error)throw this.error;return this._root=t,t}get[Symbol.toStringTag](){return"NoWorkResult"}constructor(t,r,s){let e;r=r.toString(),this.stringified=!1,this._processor=t,this._css=r,this._opts=s,this._map=void 0;let o=stringify;this.result=new Result(this._processor,e,this._opts),this.result.css=r;let i=this;Object.defineProperty(this.result,"root",{get:()=>i.root});let n=new MapGenerator(o,e,this._opts,r);if(n.isMap()){let[t,r]=n.generate();t&&(this.result.css=t),r&&(this.result.map=r)}else n.clearAnnotation(),this.result.css=n.css}async(){return this.error?Promise.reject(this.error):Promise.resolve(this.result)}catch(t){return this.async().catch(t)}finally(t){return this.async().then(t,t)}sync(){if(this.error)throw this.error;return this.result}then(t,r){return"production"!==process.env.NODE_ENV&&("from"in this._opts||warnOnce("Without `from` option PostCSS could generate wrong source map and will not find Browserslist config. Set it to CSS file path or to `undefined` to prevent this warning.")),this.async().then(t,r)}toString(){return this._css}warnings(){return[]}}module.exports=NoWorkResult,NoWorkResult.default=NoWorkResult;